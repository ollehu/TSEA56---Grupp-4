%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: huvudmodulv2.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: Olle
%%CreationDate: 2016-03-18, 08:29:36
%%BoundingBox: 0 0 811 661
%%HiResBoundingBox: 0 0 810.5522 660.9073
%%CropBox: 0 0 810.5522 660.9073
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1028 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2016-03-18T08:28:55+01:00"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2016-03-18T08:28:55+01:00"
   pdf:Producer="Acrobat Distiller 11.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:e32ce71a-1b14-443a-a9b5-a2d43c3cb934"
   xmpMM:InstanceID="uuid:e8ee3f56-dd38-42dd-be79-7082586cbe06">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">huvudmodulv2.sch</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Olle</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -660.907 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 660.907 li
810.552 660.907 li
810.552 0 li
cp
clp
gsave
4.87774 658.813 mo
808.458 658.813 li
808.458 3.49286 li
4.87774 3.49286 li
cp
clp
.06 lw
2 lc
2 lj
10 ml
[] 0 dsh
false sadj
4.87774 3.49286 mo
808.458 658.813 li
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
@
808.458 3.49286 mo
4.87775 658.813 li
@
grestore
false sop
1 /0 /CSD get_res sepcs
.5 sep
%ADOBeginSubsetFont: PBAAAA+Tahoma Initial
ct_T42Dict begin
-0.598 -0.215 1.516 1.031
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Tahoma
Type42DictBegin
[<00010000000c000c000c000c4f532f32da425ac5000000cc000000606376
742089b4966c0000012c000003086670676ddd3faf62000004340000064b
676c7966edad805500007d780000467068656164e7609bec00000a800000
0036686865610f58129400000ab800000024686d7478b1299f5700000adc
000035686c6f6361039d86f4000040440000356c6d617870117704150000
75b0000000206e616d654997cb27000075d0000001f370726570e1e8da4c
000077c4000005b1676469720000000000000000000000000003038e0190
00050008059a053300000125059a0533000003a0008202b10800020b0604
030504040204e1002effc000605b00000029000000004d53202000400020
fffd061efe59003b080101a7200101ff20280000045d05d1000000200004
061e061405f005d1047c045d03d200100000ffe7ffe1fe78fe64fe59039b
00270000009600aa00b900c600ce000000000000000000bc00c200000000
007600b200c000cb0000000000000000000000000081009400a600cc00da
00ef00000000000000000098009e00ab00b000000097009e007d0166017c
00900098009e00a400a900ae00b300ba00c3000000000000000000000000
000000000000000000000000000000000000000000d3011d000000000000
00c3021401c20000000000e9000c02d10173018e009700970042004200c6
000000000000000000000088008000390039000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000001ff0249033f025a02cc0289026f023700000000
0000027a009400c003d203a7004c004c00c000d600be0000000000000000
00000000000000000000008101f901f9007400e500b900ca019502c600ac
00a7008500880091009800a500ac006f0087008f009b00a0000000000000
00000000000000000000068a051104f200000000000000000000000000b8
00ad0086005c00db00cb00c400a0008600530000009700910000007d000a
001a001f056000000000000000aa00a20000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000045e02b50094009402cd034202bc02b0032f020403bc0191061405fa
0304006000600059007d004c008f0066004b008700a600a800bc007d0000
0000008c00b200b2008e00a40000000000710071009a00f8008302aa004c
00750075039c033100a400bc003d0062017b01080087003900b6019e00e2
005a005a007000af00e201c300b90071007104bc0068009000bc04da0718
07ec005f0051005f00aa01b704b605d5007e006d007e00c4006d403e5448
3b3a393837363534333231302f2e2d2c2b2a292827262524232221201f1e
1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100
2c01b0184358b119072b1b212121592d2c01b0184358b11a072b1b212121
592d2c01b0184358b0032510f221b000121b212121592d2c01b0184358b1
1b072b1b212121592d2c01b0184358b11c072b1b212121592d2c01b01843
58b11d072b1b212121592d2c01b0184358b11e072b1b212121592d2c4eb0
0014b046234344b0032510b10046e6b00013b00114b00010f221b001134d
b000122d2c01b018435845646a234569b01943646060b0462344231020b0
46f02fb000121b21212121592d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0462370b101463e01b0462370b10246453ab10200080d2d
2cb0122bb0022545b00225456ab0408b60b0022523442121212d2cb0132b
b0022545b00225456ab8ffc08c60b0022523442121212d2cb000b0122b21
21212d2cb000b0132b2121212d2c01b00643b00743650a2d2c2069b04061
b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2cb100
032545685458b0032545b0032545606820b004252344b0042523441bb003
25204568208a2344b00325456860b003252344592d2cb00325204568208a
2344b00325456860b0032523442d2cb00943588721c01bb01243588745b0
112bb0472344b0477ae41b038a45186920b04723448a8a8720b0a05158b0
112bb0472344b0477ae41b21b0477ae4595959182d2c208a452345686044
2d2c456a422d2c01182f2d2c21212d2c01b0022545b002254564606ab003
25456a6120b00425456a208a8b65b0042523448cb00325234421212d2c01
456823456961b00325456a6120b00425456a208a8b65b0042523448cb003
25234421212d2c018a8a45642345646164422d2c01b0022543b04054b002
2543b000545a58b003252045b040614459b0022543b00054b0022543b040
545a58b004252045b040604459212121212d2c014b525843b00225452361
441b2121592d2c014b525843b00225452360441b2121592d2c4b52584544
1b2121592d2c0120b003252349b04060b0206320b000525823b002253823
b002256538008a63381b212121212159012d2c4b505845441b2121592d2c
01b005251023208af500b0016023edec2d2c01b005251023208af500b001
6123edec2d2c01b0062510f500edec2d2c462346608a8a462320468a608a
61b8ff8062232010238ab14b4b8a70456020b0005058b00161b8ffba8b1b
b0468c59b0106068013a2d2c2045b003254652583f1b2111592d2c2045b0
03254650583f1b2111592d2c00b00743b006430b2d2c4b5258b00425b004
2549b00425b00425496120b0005458212043b0005558591bb04054582043
b0005458591b2043b00054581bb00325b8ffc03859595959212121212d2c
4b52584365381b2121592d2c4b525843381b2121592d2c21210c6423648b
b84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c64
23648bb84000626023212d2cb4000100000015b00826b00826b00826b008
260f10161345683ab001162d2cb4000100000015b00826b00826b00826b0
08260f1016134568653ab001162d2cb0134358031b02592d2cb013435802
1b03592d2cb00a2b2310203cb0172b2d2cb0282b8a102320d023b0102bb0
0558c01b3c59201011b00012012d2c4b53234b515a5820458a60441b2121
592d2c4b53234b515a58381b2121592d2c20b003254523452361688a2045
68208a234460442d2c20b003254523452361688a204568208a234460442d
2c4b5358b00425b00425496423456469b0408b6120b080626ab00225b002
25618cb0462344218a10b046f6211b218a11231220392f592d2cb0024354
584b53234b515a58381b2121591b21212121592d2c4b53234b515a58381b
2121592d2cb1020042b123018851b1400188535a58b910000020885458b2
02010243604259b12401885158b920000040885458b2020202436042b124
01885458b2022002436042004b014b5258b2020802436042591bb9400000
80885458b202040243604259b94000008063b80100885458b20208024360
4259b94000010063b80200885458b202100243604259b94000020063b804
00885458b202400243604259595959592d0000010000000535c3334479b8
5f0f3cf5001b080000000000aec0ba1c00000000d2186082fb34fe460c20
0846000000090002000100000000000100000801fe5900000c66fb34fa7a
0c20000100000000000000000000000000000d5a08000100000000000280
00000280000002a800e40336007205d2008e045e006a07d0006605640043
01b000690310006c0310004a045e007005d2009d026c004a02e8005a026c
00be030fffe8045e0053045e00e2045e006d045e0061045e0028045e007c
045e0055045e0063045e004a045e004302d400f302d4007a05d200c905d2
00c005d200d703ca006d0746008404ccfff604b7009704ce0042056d0097
047d0097042c0097055700420567009702fc005d0355000904b4009703fb
0097062a00970557009705a900420469009705a9004204f700970475004d
04acffff053f008504c6fff80737001a04a50008049cfff50479003c0310
00a6030f00340310006205d20085045efff0045e00f80433003a046c0088
03b1003b046c003b0436003b028c001d046c003b0476008801d4007f0241
ffa603fc008801d4008c06b800880476008804580039046c0088046c003b
02e200880392004302ad00150476008003fc000605f0001e03f6000a03fc
0006038e003103d8003c030f013403d8006205d2008604ccfff604ccfff6
04ce0042047d00970557009705a90042053f00850433003a0433003a0433
003a0433003a0433003a0433003a03b1003b0436003b0436003b0436003b
0436003b01d4007801d4ffff01d4ffca01d4ffda04760088045800390458
003904580039045800390458003904760080047600800476008004760080
045e008703c40065045e0072045e0059045e007703a30072045e00390463
0088076e0056076e00560702006b045e01c1045e00fd05d200c0074effd9
05a900420746006e05d200a205d200c905d200d7045e0038048b0088045e
00430517007e0571009c04820088045e004a03f2007203f20055059e002b
070a003a0458002903ca003a02a800e405d2009d05d20051045effcf05d2
00be04f4fff60496006704960083068a00b104ccfff604ccfff605a90042
07d0004207450039045efffc0746fffc0336ffc00336006b01b0ffc001b0
006105d2009d05d2007703fc0006049cfff50376ffe3045effe40310007b
031000970444001d043e001d045e0087026c00be01b0fff3032efff80b20
006604ccfff6047d009704ccfff6047d0097047d009702fc005d02fc002a
02fc004c02fc005d05a9004205a9004205a90042053f0085053f0085053f
008501d4008c045e00da045e00a1045e00b6045e00e6045e01c4045e00fd
045e0121045e00fa045e014a045e00d604240018023200180475004d0392
00430479003c038e0031030f013405960018045e0039049cfff503fc0006
04860097046c008805d200b605d200d003f200f803f200b903f200b80800
00ab080000ab0800008c045e002205570042046c003b02fc005d0475004d
0392004304ce004203b1003b04ce004203b1003b0496003b045efff002d4
00f304ccfff60433003a04ccfff60433003a056d0097057f003b05960018
047d00970436003b047d00970436003b03fb009701d4007203fb009702e3
008c03fb00970390008c0557009704760088055700970476008805a90042
0458003904f7009702e2008804f7009702e200360475004d0392004304ac
ffff02ad001504acffff03bf0015053f008504760080053f008504760080
0479003c038e00310479003c038e0031040f009705a9004205fd00420470
003b0458003903a4003c04a7003903bc000405a60039045efff0047800e4
03f2007d07a200a705d9005d0420007f058a0021025a008903cc008907d0
00660296000f04d5009202d6008302d6008304d500b102d6007004ccfff6
0433003a04ce004203b1003b04ce004203b1003b047d00970436003b047d
00970436003b047d00970436003b05570042046c003b05570042046c003b
05570042046c003b056700970476008805b9001804a0000c02fc000a01d4
ffca02fc003701d4ffe002fc005401d4ffd202fc005d01d4002f03550009
0241ffa604b4009703fc008803fc008803fb009701d40043055700970476
0088055700970476008805a900420458003905a900420458003904f70097
02e2006b0475004d0392004304acffff02b7001f053f008504760080053f
008504760080053f008504760080053f0085047600800737001a05f0001e
049cfff503fc00060208008c04ccfff60433003a074effd9070a003a05a9
00420458002902d400f30737001a05f0001e0737001a05f0001e0737001a
05f0001e049cfff503fc000601b0ffc0045effd0045e0059051000590800
00ab0800008c0800008a0800009901b00061045e0121045e01b6045e00ae
04ccfff6056d00000657000003e200000667000005be00000666000001d4
ff9c04ccfff604b7009704f4fff6047d00970479003c0567009702fc005d
04b4009704c6fff6062a0097055700970488004305a90042056700970469
00970473004104acffff049cfff504a5000806590082059e002b02fc004c
049cfff50470003b03a4003c0476008801d40071047400800471008803fc
00060321003b047600880470005801d4008c03fc008803fc0005048b0088
03fc00060377003704580039046a007e0371003a0474008003fafffb05b7
007f05cc004001d4ffda04740080045800390474008005cc0040047d0097
05bfffff040f009704cc00420475004d02fc005d02fc004c035500090803
000f07df009705beffff04d20097049affff0567009704ccfff604b70097
04b70097040f009705780012047d00970727fff20443001f055c0097055c
009704d20097056c000f062a00970567009705a900420567009704690097
04ce004204acffff049affff05fd004204a50008057b00970516005d078c
009707aa00970584ffff064f009704a9009704cc002b079c009704e4fffb
0433003a046600430432008803520088047700080436003b05d8000803a9
0020048200880482008803fc00880471000f051c00880481008804580039
04820088046c008803b1003b03bc000403fc00060614003e03f6000a0493
008804580060063a008806520088048c0004058b00880401008803c5002a
06180088043900150436003b04a0000c0352008803c5003d0392004301d4
007f01d4ffda0241ffa6069c000f0697008804a0000c03fc008803fc0006
0482008804100097035200880746006e0920009704820088045e00410800
000008000100080001000800010008000100080001000800010008000100
0800010008000100060300420480003905c1008504da0080000001ad0000
01c40000fcfe0000fd7f045e00da045effa7045e00da045e00c9045e00e6
045e00e6045e00e6045e00c9045e01ad045e00da045e00e6045e00e6045e
00e6045e00e6045e00da04ccfff60433003a04ccfff60433003a04ccfff6
0433003a04ccffce0433ff8e04ccfff60433003a04ccfff60433003a04cc
fff60433003a04ccfff60433003a04ccfff60433003a04ccfff60433003a
04ccfff60433003a04ccfff60433003a047d00970436003b047d00970436
003b047d00970436003b047d00970436003b047dffe30436ffb5047d0097
0436003b047d00970436003b047d00970436003b02fc005d01d4006802fc
005d01d4007f0000fd290000fd760800010008000100000001d30000011d
0000012d0000012d000001d30000016e0000017800000190000001750000
01d30000011d000001d3000001e80310007d0000019001cf0091000001d3
0000ff8e02d400f305620088051e003c03c4001c04ce0014057a00970231
0014027e003b057a0097059800950231001404f8001504f8003d04f80048
057a0097057a005602e5001e0335003205d8001405300032054c00690537
006903cf002804bb0046056b0097048e001e0686009705ac001e04620014
046200140462001401b000610336006b06ae00970231ff8e04f8001504f8
001504f8ff8e04f8ff8e0530003206860097068600970686009706860097
056200880562008805620088051e003c03c4001c04ce0014057a00970231
fffe02ccfffe059800950231fffe04f8001504f8003d04f80048057a0056
0335003205d80014054c00690537006904bb0046056b0097048e001e0686
009705ac001e02310014051e003c04f8003d05370069057600290000ffdc
0000ff250000ffdc0000fe5102d500f602d500f403cb0054030e006a020c
ffba00000000000000000000000000000000000000000000000000000031
00000000049301500493013b049300420493002504930093049300480493
005c0493002d0493002b0493007b0493004a02d500ee045e003f0348ffba
02cfffba03c5005c02d501100493004204930048049300dd026e00ed026e
0067026e0059026e0059023dffba00000002080001000408ffba08000100
073f005c0348ffba000000580408ffba0000fffc0400ffba077f005c0800
0100073f005c0675005c077f005c023dffba02cfffba06f6005c071d005c
0675005c06f6005c04df0050059a00500546ffba0571ffba02e500000356
00000764005c07be005c03d7ffba0442ffba0764005c07be005c03d7ffba
0442ffba06fa005c07fa005c049800520800010008000100080001000800
010008000100080001000800010008000100080001000800010008000100
080001000800010008000100080001000000ffdd00000002000000000000
00000000000005a900420458003905a900420458003905a9004204580039
05a900410458ffa605a900420458003905a900420458003905a900420458
003906030042048000390603004204800039060300420480003906030042
048000390603004204800039053f008504760080053f00850476008005c1
008504da008005c1008504da008005c1008504da008005c1008504da0080
05c1008504da0080049cfff503fc0006049cfff503fc0006049cfff503fc
0006049cfff503fc00060496003b0000fc330310006c0310004a08000100
07c30052030e006a01eefff2025efffc01ee004f025e007703560000038d
000001ee0052025e00a406fa005c07fa005c023dffba02cfffba01ee00a4
025e00a40675005c077f005c023dffba02cfffba03c5005c049800520675
005c077f005c023dffba02cfffba0675005c077f005c023dffba02cfffba
04df0050059a00500546ffba0571ffba04df0050059a00500546ffba0571
ffba04df0050059a00500546ffba0571ffba03be005c045e004603be005c
045e004602e500000356000002e500000356000009ae005c0a5c005c07d7
ffba087dffba09ae005c0a5c005c07d7ffba087dffba093d005c0950005c
0610ffba0623ffba093d005c0950005c0610ffba0623ffba0564ffba05a2
ffba0564ffba05a2ffba0564ffba05a2ffba0564ffba05a2ffba04d90052
04b0005c04beffba03ddffba04d9005204b0005c04beffba03ddffba06f6
005c073f005c0348ffba0408ffba06f6005c071d005c0348ffba0408ffba
05cd005c0666005c03d7ffba0442ffba052d005c05c9005c023fffba02cf
ffba04baff62057f00000414ffba04dbffba054c005c0606005c023dffba
02cfffba03c5005c049800520560ffba0466ffba03560000038d000006fa
005c07fa005c06fa005c07fa005c023dffba02cfffba04dfffa405aeffa4
04df002505ae002104df003505ae003504df003505ae003503c5005803c5
0058049800520000feb50000fd290000fea10000fd8e0000fd660000fe75
0000fce90000fe0a0000fd1b0000fcc30000fed80000fd2b0000fe970000
fd630000fd430000fefc0000fc260000fb340000fb4e0000fc780000fc1e
0000fbcd0000fd0c0000fd950000fefc0000fc600000fe660000fb8e0000
fd830000fcb50000fc5b0000fcee0000fc6c0000fd700000fdba0000fd6b
0000fd430000fd550000fcf10000fe210000feb50000fd480000feae0475
004d0392004304acffff02ad00150436003b047d009704820088055c0097
0000006204c3009304e7003d053d003d04ec007f04ec007f0562003f03f0
001d0473006404f60052050400520581005206e500a606a8007b04f80052
04f8003d047300560679005206fa007f06d3007f04ec007f04ec007f04ae
007f05ba00520452005604e5003d050a0052050a0052050e00a8050e00a8
05aa003d0596003d04f8005204cb003d04a200a8036f00290489007b04ee
008f04f8005203e1003704ec007f05f4005204dd008f055c003d05b8003d
04c300a004c3008d043b003d0396005c0000fd3b03e1003703e1fe640000
fbe00000fbe00000fbe00000fbe00000fe5a0000fd2f0000fea604b60098
02a800a804bc00a803f0003d0389003d0417002303e1003703fe003d0000
fca80000fea10000fdb10000fdd50000fe4e0000fe020000fe640000fde1
04d1007504d10075050e007f057b00a80581007f05dd007f05dd007f052b
000c0631007f0631007f05b8007f058d003d0885009104a600520000fb42
0000fb420000fb420000fb420000fd4f0000fc370000fb990000fcda0000
fc820000fec30000fd0b0000fd2f0000fe4e0000fe0006a6007b0000fb77
0000fcdf0000fb9a0000fe030000fdd30000fce10000fd580000fd720000
fe5a0000fd2f0000fea601b0006b031f00b6023dffba02fc005d03550009
01d4007f0241ffa6040f00230352002e076afff20602000805120097042f
008804d2009703fc008805850097049a0088049cfff503fc0006049cfff5
03fc000604e80008041e000a0516005d04580060051600970476008805a9
00420436003605a90042045800390000ffdc0000ff160000ffdc0000ff20
0000ffdc0000ff200000002c0675005c077f005c023dffba02cfffba03be
005c045e004602e5000003560000054c005c0606005c042a0064023dffba
03dcffba042a0064042a006407500013075000130750001307500013020c
002803c5005c0000ffd20000fe310000feda04730069049d003204ce0042
04ce004206b8008805570000091c00970737000004b4000004acffff0800
00290000000d0000000f026e00ed026e00670000001d06f6005c00000032
020000580200005801ee000d025e000d01ee000f025e000f01ee000f025e
000f01ee00a4025e00a403560000038d00000356ffc4038dffc406fa005c
07fa005c0675005c077f005c023dffba02cfffba0675005c077f005c023d
ffba02cfffba0675005c077f005c023dffba02cfffba0675005c077f005c
023dffba02cfffba0675005c077f005c023dffba02cfffba0675005c077f
005c023dffba02cfffba04df0050059a00500546ffba0571ffba04df0050
059a00500546ffba0571ffba04df0050059a00500546ffba0571ffba04df
0050059a00500546ffba0571ffba04df0050059a00500546ffba0571ffba
04df0050059a00500546ffba0571ffba03be005c045e004603be005c045e
004603be005c045e004603be005c045e004603be005c045e004603be005c
045e004603be005c045e004602e500000356000002e500000356000002e5
00000356000002e500000356000002e500000356000002e5000003560000
02e500000356000009ae005c0a5c005c07d7ffba087dffba09ae005c0a5c
005c07d7ffba087dffba09ae005c0a5c005c07d7ffba087dffba093d005c
0950005c0610ffba0623ffba093d005c0950005c0610ffba0623ffba0564
ffba05a2ffba04d9005204b0005c04beffba03ddffba06f6005c073f005c
0348ffba0408ffba06f6005c073f005c0348ffba0408ffba06f6005c073f
005c0348ffba0408ffba06f6005c073f005c0348ffba0408ffba06f6005c
071d005c06f6005c071d005c09c7001e09c7001e089bffba089bffba0764
005c07be005c03d7ffba0442ffba05cd005c0666005c03d7ffba0442ffba
05cd005c0666005c03d7ffba0442ffba05cd005c0666005c03d7ffba0442
ffba0764005c07be005c03d7ffba0442ffba0764005c07be005c03d7ffba
0442ffba0764005c07be005c03d7ffba0442ffba0764005c07be005c03d7
ffba0442ffba0764005c07be005c03d7ffba0442ffba052d005c05c9005c
023fffba02cfffba052d005c05c9005c023fffba02cfffba052d005c05c9
005c023fffba02cfffba052d005c05c9005c023fffba02cfffba054c005c
0606005c023dffba02cfffba054c005c0606005c054c005c0606005c023d
ffba02cfffba054c005c0606005c04df0050059a00500546ffba0571ffba
03560000038d000003560000038d000003560000038d000003560000038d
000003560000038d000003560000038d000003560000038d000003560000
038d0000076400000864000006fa005c07fa005c023dffba02cfffba0356
0000038d000006fa005c07fa005c06fa005c07fa005c0000fdfe0000ff3f
0000ff300000ffa70000fe2208fc003208ad00320000ffb50000ffb60000
fefb0000fefe0000fe220000ff9701cd0032035300280000fe840000ff0b
04cd00320000ff580000ff580000fefe09ae005c0a5c005c07d7ffba087d
ffba093d005c0950005c0610ffba0623ffba04d9005204b0005c04beffba
03ddffba030e006a04ba000003be005c045e0046045e00b6045e00b6045e
00b6045e00b6045e00fd045e00fd045e00e6045e00a1045e00e6045e00a1
045e01c4045e01c1045e00da045e00da045e00b6045e00b6047d00970436
003b045e017a04ccfff60433003a04b70097046c008804b70097046c0088
04b70097046c008804ce004203b1003b056d0097046c003b056d0097046c
003b056d0097046c003b056d0097046c003b056d0097046c003b047d0097
0436003b047d00970436003b047d00970436003b047d00970436003b047d
00970436003b042c0097028c001d05570042046c003b0567009704760088
056700970476008805670097047600880567fffe0476ffe1056700970476
008802fcffed01d4ff5702fc004c01d4ffb304b4009703fc008804b40097
03fc008804b4009703fc008803fb009701d4007a03fb009701d4ff7603fb
009701d4ff7603fb009701d4ff90062a009706b80088062a009706b80088
062a009706b8008805570097047600880557009704760088055700970476
0088055700970476008805a900420458003905a900420458003905a90042
0458003905a900420458003904690097046c008804690097046c008804f7
009702e2008804f7009702e2008804f7009702e2003404f7009702e20034
0475004d039200430475004d039200430475004d039200430475004d0392
00430475004d0392004304acffff02ad001504acffff02ad001504acffff
02ad001504acffff02ad0015053f008504760080053f008504760080053f
008504760080053f008504760080053f00850476008004c6fff803fc0006
04c6fff803fc00060737001a05f0001e0737001a05f0001e04a5000803f6
000a04a5000803f6000a049cfff503fc00060479003c038e00310479003c
038e00310479003c038e00310476008802adffd105f0001e03fc00060433
003a0208008c0470003b0470003b0470003b0470003b0470003b0470003b
0470003b0470003b04ccfff604ccfff60592000005920000052e0000052e
0000055800010558000103a4003c03a4003c03a4003c03a4003c03a4003c
03a4003c04fd000004fd0000063d0000063d000006150000061500000476
008804760088047600880476008804760088047600880476008804760088
05e7000005e70000072700000727000006ff000006ff0000071e0000071e
000001d4008c01d4008c01d4ffda01d4ffda01d4fff801d4fff801d4ff61
01d4ff6103a4000003a4000004f8000004f8000004bc000004bc000004db
000004db0000045800390458003904580039045800390458003904580039
05a90000060d0000076900000769000006dd000006dd0000047400800474
008004740080047400800474008004740080047400800474008005a80000
06d4000006d4000006df000005cc004005cc004005cc004005cc004005cc
004005cc004005cc004005cc0040059e000006020000075e0000075e0000
06d2000006d2000007410000074100000470003b0470003b03a4003c03a4
003c047600880476008801d4001101d40089045800390458003904740080
0474008005cc004005cc00400470003b0470003b0470003b0470003b0470
003b0470003b0470003b0470003b04ccfff604ccfff6059c0000059c0000
053800000538000005580001055800010476007f0476007f0476007f0476
007f0476007f0476007f0476007f0476007f05e7000005e7000007270000
0727000006ff000006ff0000071e0000071e000005cc004005cc004005cc
004005cc004005cc004005cc004005cc004005cc0040059e000006020000
075e0000075e000006d2000006d2000007410000074100000470003b0470
003b0470003b0470003b0470003b0470003b0470003b04ccfff604ccfff6
04ccfff604ccfff604ccfff602d50110045e01c902d50110045e00a1045e
00a10476007f0476007f0476007f047600880476007f0570000005200000
065a0000060a00000567009702d5005c02d5005c045e00a101d4ff9c01d4
ff6c01d4ff6401d4ff6401d4ff5701d4ff5702fc003202fc0002042b0000
03db000002d5005c02d5005c045e00a10474008004740080047400800474
0080046a007e046a007e0474008004740080049cfff5049cfff506070000
05df000004e90000045e00ae045e00ae045e017905cc004005cc004005cc
004005cc004005cc00400674000005a9000006690000059e0000059e002b
045e01a102d501100000feaa0000fe870000fdc10000feb60000ff950000
fecd0000fece0000fe700000feaa0000ffbf0000ff3d0000fe700000feb6
0000feb70000ffa10000ffa10000ffa1000000640000ff2d0000ff2d0000
ff440000ff440000fe87000000000000ffa30000ff440000ff440000ff44
0000fe870000fea9000000000000fecd0000ff470000ffa10000ff0e0000
ff650000ffbf0000fe870000febb0000feaa0000feaa0000feb60000feb7
0000fe710000fe870000fdc10000fe4d0000fe710000fe870000fdc10000
fe870000fe880000ffa30000fe870000ff440000feba0000ff230000ff9a
0000fdc10000fe710000ffa10000fe7e0000ff990000fe870000fdc10000
ff3d0000ff440000fe700000fe710000fe6c0000ff030000ff440000ff53
0000ff530000ff5304dfffab05aeffab04df003505ae003504df003505ae
003504df003505ae003504df003505ae003504df003505ae003504df0035
05ae00350493007904930060046c000a056b000004b70097046c008804a9
0000046c000004ce004204ce004203b1003b059600180621000004b7002a
046c003b04580039047d004304430037042cff3e0557004204c6fff30728
008801d4008c02fc001804b4009703fc00880232001703fc000506e80097
0557ff3e0476008805a90042074b00420585003b051d0000046c00880486
0097047500330392002704730041045e000402ad001504acffff02ad0015
04acffff059e002b053f0085058cfff503fc00060479003c038e00310443
001f04430037038e0031038e0033045e006d045e002d03a9002003dd0015
046c0088030f0134030f006c05d200c102a800e409f100970906009707da
003b07b500970691009703e3008c087f0097075b00970691008804ccfff6
0433003a02fc002c01d4ff9405a9004204580039053f008504760080053f
008504760080053f008504760080053f008504760080053f008504760080
0436003604ccfff60433003a04ccfff60433003a074effd9070a003a0557
0042046c003205570042046c003b04b4009703fc008805a9004204580039
05a90042045800390443001f038e000a0241ffa609f100970906009707da
003b05570042046c003b08020097047a0097055700970476008804ccfff6
0433002804ccfff60433003a047d00970436003b047d00970436003b02fc
ff9c01d4fefc02fc003501d4ffa705a900420458003905a9004204580039
04f7006402e2ffec04f7009702e20067053f008504760050053f00850476
0080040200420374002305670097047600880516009704a8004204460039
0479003c038e003104ccfff60433003a05a900420458003905a900420458
003905a900420458003905a9004204580039049cfff503fc0006045e00b6
045e00b6045e00da045e00fd045e00b6043300800470003b04700088046c
008803b1002303b10000046c003b046c003b0436003605c0003603a4003c
03a9002005160020043f003b028cffb8046c003b046c003b044e003903fc
000c04e0000504760080047600880476008801d4000001d4008c02fc0062
031f00000232ffcd01d4008c046e008c06b8008006b8008006b800880476
ff310476008804820088045800390649003905cc00400458003902e2000a
02e2000a02e2000a02e2008802e2008802ca008802ca000a041d0088041d
008803920043045e004a028cffb8045e004a04a2000002ad000302ad0015
04760000050e00800474008003fc000605f0001e03fc000603a20006038e
003104640031038e000a038e000a03b1002303b1003b03b1002303b1003b
05a9004204320088043f003d044e0039048100880331000003fcffd60352
0088046c003b03b1002303b1003b0710003b06fe003b07e8003b054b0015
045c001505e100150676001d0506008c0472008c03e2001e048200880471
0088047400800564fff5069000000564fff50458003905cc0040045b0005
05a900420458003904ce004203b1003b042c009703a6008804ff0000043c
0032060d000a049d000006e8009706b800880516005d0476008005160097
044e000a0475004d0475004804e0000504e0000505a900420466004303c6
0014034f0028045b00050466004303b1003b0241ffa605a9004203b1003b
03b100230926004205d6001e057200050490000506ce00970587008804cc
fff603fc0006068e0097058c0088064afff304ea00040820009706ac0088
0443005003a9001f0659008205b7007f05a900420458003905bdfff804f2
000605bdfff804f200060935004207db003906d70042054a0039077d0042
061100390926004205d6001e04ce004203b1003b03f80014000000d40000
00b6000001d0000001d10000fc2b0000fc4c055c00970482008804a9000e
0401000204690097046c0088048f0097041400880443001f03a9002004d2
001803fc000c05bf00000490000006540097051600880801009706c90088
05e90042048c003904ce004203b1003b04acffff03bc0004067e00000539
00000516005d0458006006990000050a000006990000050a000002fc005d
0727fff205d8000804d2009703fc0088056c000f0471000f056700970481
008805670097048100880516005d04580060062a0097051c008804ccfff6
0433003a04ccfff60433003a074effd9070a003a047d00970436003b05a9
0042043600360727fff205d800080443001f03a900200443001f038e000a
055c009704820088055c00970482008805a900420458003905a900420458
003904cc002b03c5002a049affff03fc0006049affff03fc0006049affff
03fc00060516005d04580060064f0097058b008804a90026046c003b0744
00260716003b073e0050069e005704bc0050040800570807000f071b000f
08020097072c008805570042044e003905ebffff056e0004045e00b6045e
00da045e00fd045e00b6045e00a1045e00660764005c07be005c02310014
0000feb602de00000462001404dfffa905aeffa90000ff210000ff0e0000
ffce0000ff060000ff240000ff210000ff150000ff240000fe940000ff6c
0000ff5b0000ff040000ff07045e01a1045e01a1045e01c9031400640314
006401dc001402040064020400140204001402cd006403e6000a02b8000a
025a008903cc008901b0ffc001b0006101b0ffc0045e0196045e01960303
00640303006405d200c905d200d705d200b305d200b3045e01ee045e01c1
045e00f8045e01ee045e00b6045e00f8045e01c102d400f302d400f3045e
0196045e019602aa009902aa009902aa0099045e00b602aaffe9030e002d
02b0000a0146006402e6006402ae000a0303006403100096031000960310
0096031000960310009602aa006202aa0062045e00da045e01040336006b
045700960457009604570096045700960457004304570043045700430457
004304570043031000430457002f0457002f0457002f0457002f0457002f
0310002f04570025045700250457002504570025045700250310002f0457
001a0457001a0457001a0457001a0457001a0310001a0457004204570042
045700420457004204570042031000420457009604570096045700960457
00960457004204570042045700420457004204570042031000420457002f
0457002f0457002f0457002f0457002f0310002f0457002f0457002f0457
002f0457002f0457002f0310002f04570026045700260457002604570026
045700260310002604570042045700420457004204570042045700420310
004204570096045700960457009604570096045700420457004204570042
045700420457004203100042045700260457002604570026045700260457
002603100026045700230457002304570023045700230457002303100023
0457002f0457002f0457002f0457002f0457002f0310002f0457004b0457
004b0457004b0457004b0457004b0310004b045700960457009604570096
045700960457004204570042045700420457004204570042031000420457
001a0457001a0457001a0457001a0457001a0310001a0457002404570024
045700240457002404570024031000240457002f0457002f0457002f0457
002f0457002f0310002f0457004e0457004e0457004e0457004e0457004e
0310004e045700960457009604570096045700960000fd1f0000ff430000
ff070000ff770000ffbd0000ff600000ff560000ff740000fed70000feac
000000000000ff560000ff56000000000000feac0000fd9a000000000000
ff6a0000ff7c0000ff690000ff560000feac0000ff7f0000ff560000fdef
0000ff430000ff690000ff7c000000000000fdae0000ff8c04c100660000
ff530000ff530000ff530000ff5301d400000241ffa6042b000504690016
0603003b0367005106150088036f00150557000a0630000a045e015e045e
015e045e019f045e019f045e0177045e00f8045e0043045e00fa045e00a1
02d400f3045e0173045e0173045e0173045e0173045e00b6045e00b602aa
003a0000fee70000ff650000feb60000ff230000ff720000ff720000fee7
0000ff650000ff530000ff530000ff5304860097046c008803f8000005c6
0000070a003a0402001d03b1003b047f0088047f001d03a4008803a90020
01d4007f02f8003903fc008803700014051c0088048200880458003903b1
0023050d003905020039050dffd007450039039200390458003904580039
04010088043900150439001503bc000404740080057c00800678003906b8
012203fc000605f0001e038e0031038b00390409003904db001e03520088
03fc0006048200880401008805b7007f0471000f03440000052100000358
00640358001a03c60064032300640323005003db0050039d006402240050
028b0050033b006402f70064041e00640391006403940064041300500322
0050032a00640369006403c200500399006404b300000307005003070064
032b0050050d00500327006403270050032700500327005002d6005002d6
0050032700500158006402d000640498006403140064033c005002db0050
033c0050033c005003270064025b00500314006403a200500498006402a4
00000355001e032e006402a40000033c0050041c005002b0000001580064
020400640314006402a40000032e006402a40000033c0050041c005002b0
0000066800460c660046098c004607e00046095c005c0295003c04d9002d
0000ff000000fef40000fee00000fe990000fe8b0000ffd20000ff090000
ff620000fef403be005c045e004602e50000035600000560ffba0466ffba
0560ffba0466ffba069e008805fa001406a600970624003d0624004806a6
009705ba001e06d8001e05d2009d0000fe940000feac0000fe8f045efffc
0336ffc003ccffce05d200b6023fffba023fffba023fffba023fffba098c
00520b19005c0400000008000000040000000800000002ab000002000000
01550000045e0000026c0000019a000000ab000000000000072f00800241
ffa6070c003b070c003b04ccfff604ce004203b1003b03fbff8604acffef
03920043038e003104530023000001c40000ff4d0000febd0000ff600000
fce7046a000004ce002204ce004204ce0022040f0097035200880000ff43
0000ff460000ffaf0335009105e80036026e00590000ff290000001d0000
00320000ffb600000000000000000675005c077f005c023dff8f02cfffba
0675005c077f005c023dffba02cfffba0675005c077f005c023dffba02cf
ffba0675005c077f005c023dffba02cfffba0675005c077f005c023dffba
02cfffba0675005c077f005c023dffba02cfffba0675005c077f005c023d
ffba02cfffba04df0050059a00500546ffba0571ffba04df0050059a0050
0546ffba0571ffba03be005c045e004603be0032045e003202e500000356
000009ae005c0a5c005c07d7ffba087dffba04d9005204b0005c04beffba
03ddffba04d9005204b0005c04beffba03ddffba04d9005204b0005c04be
ffba03ddffba06f6005c073f005c0348ffba0408ffba06f6005c073f005c
0348ffba0408ffba0764005c07be005c03d7ffba0442ffba0764005c07be
005c03d7ffba0442ffba0764005c07be005c03d7ffba0442ffba04baff62
057f00000414ffba04dbffba04baff62057f00000414ffba04dbffba054c
005c0606005c023dffba02cfffba054c005c0606005c023dffba02cfffba
054c005c0606005c023dffba02cfffba052d005c05c9005c023fffba02cf
ffba02e500000356000002e500000356000009ae005c0a5c005c07d7ffba
087dffba046cff58046c003b028cff7006b8ffa80476ffa8046cff5902e2
ff5802caff5803e2ff8b02adff64038effa8046c00880383006204420047
0723001502fc000601d4ff72046c000504740005050e0005046c0088046c
003b028c0001046c003b03fc008801d4fff106b8008804760088046c0088
02e2ffed03920043045e004a0400000603f6000a038e00310433003a0470
003b046c003b0436003b03a4003c03a900200436003601d4007f03b10023
045e004a04760080038e000a032b006402db005002db00160339005002d6
005001d2001801d1ffec0327005003140064014e000a0146006402080046
0208000702230000014000640140fffc0243006404980064049700640314
ff7e0314006403170064033d0050033d005002b8005002ed0032025b0050
0314000e03630056031400630314006402a400000299003c0299003c030c
003c0294000a032300500000ff3e0000ff3e0000ff9c0000fedd026c00be
0307005003270050033c005002a7000703270050045e0042045efff6045e
0000045e004202aa0042026effe10506001606b8ffa80476ffa80400ffa8
039201b402a700070000fea90000fea9026e00ed026e0067026e0059026e
00590470003b0470003b0470003b0470003b0470003b0470003b0470003b
0470003b01d4ff7101d4ff7101d4ff7101d4ff7101d4ffa001d4ffa001d4
ffa001d4ffa0047400800474008004740080047400800474008004740080
047400800474008001d4ff7101d4ff7101d4ffa001d4ffa0047400800474
0080047400800474008004df003505ae003504b7001c053f001e04c6fff6
047d00970436003b035500090241ffa605ca00420470003b04f7001c02e2
001c049cfff503fc000603b1002303b1003b03b1002301d4008c040f0006
0352ffed04f4000803e0000a04a5000803f6000a0443003703a4003c056c
000f0471000f000001040000006400000065000000640000006500000065
0000006500000064000000770000007705ed000d03b0004303b1002303fb
001c024a0014048bffff0469001c04f700970433003a02adffcd05850097
0476008805520097048200880503003c03fa003104200005041f00970348
008805a6003902f700af034f00af035a00af03de007504c9007504c90075
040000f7040000f60400019f040001aa0000000003b1001e0140000007c5
000005c9008505080085051a0026057800260508008504e2004d04a80097
05080085066500850520002c04f0009703fb009706e30097052c0028053f
0085042c002c04ce0023056700230565006005c90085053f002c05670000
04b90042053f008504b900420582002304e2005005c90085053f00850555
0023052d002604dd0085055500420404009705fd004204e3000005a90042
053d0023018900650189006502700065030100650270006502f7006503bc
006506b800800476008804b7003b04c900880476008004b7003b040b0080
047600880571008804ad003b047600880299008806f400880468003b0476
00800476008803e5003b04c9008803fe003b04c100800299000004c90000
038d0018047600880383001806b8008003d60018046e00880476008004c1
008006b0008004760088046c003b0327008806a8008004b9000004580039
0559002704c1008002d400f302e80047051600de05a90042046c003b0737
001a05f0001e0522008d0000fc1205c3004204b500060845001a06dc001e
02cc004802cc004801c5008401c5008401c50084045e00f002d400f303e0
009701b0006901b00069060302a405190236045e0058045e0078045e0007
045e002005cb005306660046000000000000003e0000003e0000003e0000
003e0000003e0000003e0000003e0000003e0000003e0000003e0000003e
000000d800000184000001840000020c0000020c00000244000002820000
02c800000402000004ae000005a000000716000007d0000008f800000a74
00000ae800000cba00000e3400000e7e00000e7e00000e7e00000eca0000
0eca00000eca00000eca00000fe2000011aa0000130a00001414000014b8
00001556000016e00000183e0000190c000019cc00001aea00001b5e0000
1cb400001e1800001f660000207e0000207e000021c8000023ae0000247c
000025ba000026e00000282e0000297c00002a5c00002a5c00002a5c0000
2aaa00002aaa00002aaa00002aaa00002aaa00002ce400002e860000300a
000031aa00003396000034ca000036a80000381200003812000038120000
398000003a5a00003cc600003e3000003fa400003fa400003fa400004084
000042be000043ce00004552000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
000046700000467000004670000046700000467000004670000046700000
467000004670000046700000467000004670000046700000467000004670
0000467000004670000100000d5a00a80018006600080002001000400055
0000039202c3000500020000000a007e0001000000000003000d00000001
000000000004000d000d0001000000000006000d001a0003000104090000
006400270003000104090001001a008b0003000104090002000e00a50003
000104090003001a00b30003000104090004001a00cd0003000104090006
001a00e70003000104090007007401014250444b43462b5461686f6d6142
50444b43462b5461686f6d614250444b43462b5461686f6d6100a9002000
320030003100340020004d006900630072006f0073006f00660074002000
43006f00720070006f0072006100740069006f006e002e00200041006c00
6c0020007200690067006800740073002000720065007300650072007600
650064002e004200500044004b00430046002b005400610068006f006d00
610052006500670075006c00610072004200500044004b00430046002b00
5400610068006f006d0061004200500044004b00430046002b0054006100
68006f006d0061004200500044004b00430046002b005400610068006f00
6d0061005400610068006f006d0061002000690073002000610020007400
72006100640065006d00610072006b0020006f0066002000740068006500
20004d006900630072006f0073006f00660074002000670072006f007500
700020006f006600200063006f006d00700061006e006900650073002e00
00>
<b154004112017d00010010017d0040017d0090017d0003003f0175005f01
75005f017600030040016fb3282d3640b8016fb2171b36b80171b3033a21
90411a01710001003001710050017100700171009f017100bf017100df01
710006000f0171003f0171005f0171007f01710004ffc00153b21c1d36b9
ffc00163b2121336b9ffc0014eb2333436b9ffc0014eb2242636b8014eb3
3c161f0fbd015b00ef015b00020040015ab3191a3640b8015ab315153640
b8015ab2101036b9ffc00159b3090a3640b80170b3282d3640b80170b217
1b36b9ffc0015db2151b36b9ffc00162b2141536b9ffc00162b21c1d36b9
ffc00152b21c1d36b9ffc00167b22f3636b9ffc00167b20e2636b9ffc001
66b2090d36b9ffc00161b2090d36b9ffc00165b2333636b9ffc00165b228
2a36b9ffc00165b21d2036b80165b21a191fb9ffc00161b24f5136b9ffc0
0161b23e3f36b9ffc00161b2191d36b9ffc00161b313153640b80161b30b
0d3640b8015fb2283236b9ffc0014fb2565a36b9ffc0014fb3393b363041
16014f0040014f0050014f00030070014f0080014f000200000164001001
64000200d0016400e0016400020164b270641fb9ffc00146b2131436b9ff
c00146b2161636b9ffc00146b2090a36b9ffc00142b2111336b9ffc40142
b20a0e36b9ffc0013eb2171836b9ffc0013db20b1836b90130012f400b32
1fe7e8641fe8d2301f20bc01390030013900020139b203181f410a013b01
320010001f01370132000d001f01350132b2141f2f410c01320001013601
33000e001f013401330014001f01310133b2101f40ba013800900138402f
020fe32fe30240da222436d1d73f1fd6d71a1f80d501d5d71a1f1fd70170
d701cac92a1fcac93938ca010bc844c802b8ffc0b6dc0911364fd201b8ff
c0401eb229323610b220b240b250b270b280b2a0b2b0b2d0b2e0b20ac0b2
f0b202b8ffc04044b51718361f44010f561f56024f555f550238bf2a1f6f
bf019fbfafbf0237b9151f2fbb01bcbe171fbdbe161fbebd151fbab9521f
b6b9291fb7b9321fb8b9321fb935391fb80173403a3f321f3c3f321f3d3f
3d1f3e3f211f433f1d1f423f521f413f521f403f521f3f35321f3233641f
3335341f3534541f34351e1fd034e034f03403b8ffeeb3b4254836b8ffe0
b3b4102336b8ffee400eb4090f36b41a481fd06e01e07101b8ffc0400998
090a364071091136b8ffc1400970121536406f131536b8ffc0401a6e0912
367099014067090f3670668066a066b06604af65bf6502b8ffc0402a6409
11366f937f93026f9001708e017f8c9f8c0280a00100625062c062034061
706102105b205b905b03b8017440b714321f6814481fb314481f2d14111f
2c14251f2b14391f2a14131fdf28ef2802cf28df28ef28032814101f9e20
431f1f141e1f2120431f20143c1f9f1a521f1a1b471f1b1a3c1f1a14321f
1514391f1314411f12141a1f11141a1f70140140144143360006010f0101
0f012f013f016f017f01af01bf01cf01ef01ff010a0f00010f002f003f00
6f007f00af00bf00cf00ef00ff000a0a09371f0f020f0302cf02cf03ff02
ff03040c0d39050439030239010039500501b801ff01b0124b004b5442b0
13014b004b5342b109322b4bb0645242858d8d1db0964b5258b0801d59b8
08004b5458b001b0018e59b0084b5358b001b0018e59002b2b2b2b73742b
73747374b00345b006456861b006234473b00345b00e456861b00e2344b0
0e45b00f456861b00f234401b0144568b01423442b732b2b2b2b2b2b2b2b
2b2b2b2b2b73742b2b2b2b2b2b2b73737373737373732b73732b732b2b2b
2b2b73742b2b2b2b00752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b742b73742b7373742b73742b01742b0073732b2b73742b732b2b2b7373
2b2b2b732b2b2b2b732b2b2b2b2b2b2b2b2b2b2b737474752b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73002b2b2b2b2bb80171
4568b8017123447374752b2b2b7373742b00000000>
[16293 1741 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 62 11 <0001006cfe6402c6061400150049403507400d103701400d10370710090a
370110090a372803280548034805770d7711060701010c08300070000200
000f1f1004200402042f5ded332f5d3c003f3f3130015d2b2b2b2b012326
0211101237331506060706021514121716161702c6e5aec7c5b0e551933f
3c4b493e3c9a4dfe64cf01ce013b013401d5cf0a49bf7f7bfed8a4abfee4
807bc745>PBAAAA+Tahoma AddT42Char 
2 216 12 <0001004afe6402a406140015005cb90013ffc0b30d103703b8ffc0402b0d
103706030613150315132601260326132615470147157809780d0c120104
0c123f047f040204040b1f00b8ffce400a0b0b063b00000100001711332f
5d2bed332f5d3c003f3f3130015d2b2b0110020723353636373612353402
272626273533161202a4c6afe54d9c3a3e494a3d3d9a4ce5aec7023cfecb
fe2ccf0a45c97981011fa7a501267c7cc6450acffe2e>PBAAAA+Tahoma AddT42Char 
2 388 14 <0001009d0043053504d5000b0057403e03ac0104bf08ac0a0f070107300d
400d0200ab0a800101012a05100d0d063b05ab0720043004400450040404
160d0d063b04180c0c063b040e0b0b063b042f2b2b2b5d3ce42bfd5d3ce4
5d002f5d3ce4fd3ce431300121112311213521113311210535fe07a6fe07
01f9a601f9023cfe0701f9a001f9fe07>PBAAAA+Tahoma AddT42Char 
2 524 16 <0001005a0231028e02e60003001d40090142027f0001000002b8ffc0b30c
1137022f2b332f5d002fed313001213521028efdcc02340231b5>PBAAAA+Tahoma AddT42Char 
2 580 17 <000100be000001ad011d00030025400a025601082f0501002d01b8ffe240
0a0b0b063b6f017f0102012f5d2bed5d003fed31302123113301adefef01
1d00>PBAAAA+Tahoma AddT42Char 
2 642 18 <0001ffe8febc02d806140003002640140300010138020314020203020301
2000010000022f332f5d003f2f313087052e2b877dc40101230102d8fdb9
a902440614f8a8075800>PBAAAA+Tahoma AddT42Char 
2 712 19 <00020053ffe1040b05ef000b002300c2401534013b0b45014a0b7a11053a
1535214a1545210409b8fff040180e0f3703100e0f3715b9090221b9030a
0f2110007f000200b8ffd4b40d0d023b00b8fff0b40c0c023b00b8ffd6b4
0b0b023b00b8ffe0b40c0c063b00b8ffe0b40d0d063b00b8fffc402c0b0b
063b00001b21a006c0060206100d0d023b06100c0c023b06160b0b023b06
0c0d0d063b060c0c0c063b06b8ffe2b40b0b063b06b8ffc0b30d1137062f
2b2b2b2b2b2b2b5ded332f2b2b2b2b2b2b5ded003fed3fed2b2b5d31305d
011002232202111012333212013636353426272626232206070606151416
171616333236040be9f3f6e6e9f3f6e6ff001d18181e1e6954536b1f1e16
13201d6b56536b02e9fe6ffe89017e018801930175fe7efcb64ae29a99e2
4b4c4f4f4e4ce8929cd2534d534f>PBAAAA+Tahoma AddT42Char 
2 1026 20 <000100e2000003b805d6000c007b402505b6060609030b03b801082f0001
af000100050100090b080c0c023b0b2001200380030203b8ffeeb40d0d02
3b03b8fffe400b0c0c023b030c0b0b023b03b8fff4b40c0c063b03b8fff4
400e0d0d063b030c0b0b063b03030e0d1112392f2b2b2b2b2b2b5d33ed2b
39322f332f5d71003ffd3c3f332fed313021213521112135323637331121
03b8fd2a010efef29991099b01089803e6885779fac2>PBAAAA+Tahoma AddT42Char 
2 1198 21 <0001006d0000040405f00026007a40331a2225172b1f2b213c0536173923
4c054617492354175a215b226517601b7417771b7b207f221314140eba19
020225ba010825b8ffc0401f0b1037262608213f1c4f1c021c1a0c0c023b
1c1625161c032f0201c0020102b8ffc0b30a0d37022f2b5d7117332f2f2b
5ded332f2b003ffd323fed332f31305d2121353636373636353426272626
232206070606072335363633321615140607060607060607210404fc6963
b054aa7c2722235c37356d322a4e180b3edd63d0ec292425683a5ee74502
dcd15eac5dbbe1783e5e1f1e1e1b14113011d41f3bddbd57943f41803e66
dc40>PBAAAA+Tahoma AddT42Char 
2 1440 22 <00010061ffe103ea05f0004000bc4070160e260929152923360932123a23
342d353a450944124a23442d443a55095a165a23552c5c31533a6309600e
630f641969237509700e710f79231d15143635b96038013838210b070700
ba0b02252529ba210a363b080d0d063b3b211136141103242f213f1b801b
021b160c0c023b1bb8fff4b40b0b023b1bb8fff8400c0d0d063b1b081b08
60240124b8ffc0b30b0d37242f2b5d33332f2f2b2b2b5ded1217392fed2b
2f003fed332f3fed332f1112392f5ded12393931305d0122060706060723
353636333216171616151406071516161716161514060706062322262735
33161633323637363635342627262623233533323635342627262601ff36
6c3430471c0c41df6565973d4243a2712f6b2e2e3a453f41b87570dc4b0e
3fd46a3d7b29282a2f2a2a7343554287a92c22265c05431a15142c13d323
39292b30885b7bba190e092c2b2b876165a94144463626d32e54272c2c6a
5151681e1e17a6807a3851181a14>PBAAAA+Tahoma AddT42Char 
2 1814 23 <000200280000042b05d1000a000d007e401d0c0d0d370607140606070c06
07090db90101040403070303080004070cb8fff8400c0c0c023b0c200100
20080108b8ffdeb40d0d023b08b8fff2b40c0c023b08b8ffe0b40c0c063b
08b8ffe6b70d0d063b08080d062f33332f2b2b2b2b5d333cfd2b393c2f00
3f3f12392f3c10fd3c11393987052e2b047d10c431300123112311213501
331133211101042bb1c0fd6e029ab8b1fe8ffe0a0200fe000200d202fffc
cf0246fdba00>PBAAAA+Tahoma AddT42Char 
2 2000 24 <0001007cffe103f305d1002d009c40322a083a08361439194a0843144a19
5a0854145a196a087a080c20201db928280624ba21030a0a11ba060a2323
17213f000100b8fff0400b0d0d023b000c0c0c023b00b8fff4b40b0b023b
00b8fff4b70b0b063b00252020b8ffeeb40d0d023b20b8fff8400b0c0c02
3b20002060090109b8ffc0b3090d37092f2b5d33332f2b2bed2f2b2b2b2b
5ded332f003fed332f3fed12392ffd322f31305d01140607060623222627
353316161716163332363736363534262726262322060711211521113636
33321617161603f3453e3fbb746bcf4c0e1756343b623d3c722925272b29
2b7d4d51a4310331fd9024461d729e494a4f01da6cb843444e2f26d3112b
1315172b302c76504f6621261f190b02ffaffe740404263738a8>PBAAAA+Tahoma AddT42Char 
2 2296 25 <00020055ffe1041b05ed0025003a00c94045091c05231710191c15233928
3234323a49284234443a5902571052235224642364247434121d062cb920
20061216161aba120238b9060a15180d0d063b1515262110000100b8ffd6
b40d0d023b00b8fff0b40c0c023b00b8ffd6b40b0b023b00b8ffe040100d
0d063b001d2f003221a00cc00c020cb8ffc040160c11370c100d0d023b0c
100c0c023b0c160b0b023b0cb8ffe4400b0b0b063b0c0c0d0d063b0c2f2b
2b2b2b2b2b5ded3332322f2b2b2b2b5ded332f2b003fed3ffd322f111239
2fed123931305d0114060706062322262726023534123736243332161715
232626232206073636333216171616073426272626232206070606151416
171616333236041b4c4043a66465a53f4d575053510100a8325621091b66
3abae5154796595783475250cb303627633446844002023d2d2b5b357895
01e373c2414547444351010fc6c2013974717f0a0bbf0f19fbf732362335
3ebe885c7c2c20142a2816291f9bbe312f26ac00>PBAAAA+Tahoma AddT42Char 
2 2676 26 <000100630000041405d10006004c402f030001019e020314020203000203
ba050302080301002b027402020202041000010000200430044004600480
0405042f5d332f5d12392f5d123939003f3ffd1139313087052e2b877dc4
010123012135210414fd7cd502aafcfe03b104f2fb0e0522af00>PBAAAA+Tahoma AddT42Char 
2 2792 27 <0003004affde041405f3000e001d003a011fb6150c0c0d063b0cb8fff4b4
0c0d063b0bb8fff4b40c0d063b0ab8fff4b40c0d063b09b8fff440630c0d
063b2a113008300e301932324008400e4019423259015a0554085f115a12
5f175419541d532953335d37640a65176c216026632c6330643669397c12
762c73301f27150c350912061e03b72e021bb81e0a002031313815282b0f
21340c10380138b8ffe0b40d0d023b38b8ffd2b40b0b023b38b8ffe0b50d
0d063b3806b8fff4b40d0d023b06b8fffe40110d0d063b06212b382b1821
a024c0240224b8ffc040160e113724100d0d023b240c0c0c023b24160b0b
023b24b8ffe0400b0b0b063b240c0d0d063b242f2b2b2b2b2b2b5ded3333
2fed2b2b2f2b2b2b5d3939ed11393911332fed003fed3fed12173931305d
2b2b2b2b2b01342623220615141617161617363613342627262627060615
141633323601222627262635343637352626353436333216151406071516
16151400032b86776d8b47471f7f34573e1c48672271475358a37b7e98fe
e86fb6403f41817b6e6afec3cbf5756e8286feeb0476648678664a662911
3c11438dfd715c6c38132c1e37a16787b097fed4423e3ca55c79cb3c0640
9872a8e0d5a664c437063dae89bffefe>PBAAAA+Tahoma AddT42Char 
2 3258 28 <00020043ffe3040905ef0014003a00c6404004310a3816311a3829253d02
3d08350b4d024b08450b541758255a385b396b386c397a02702213321b0f
b935352706b91b022b2b2fba270a3212002110210121b8ffd6b40d0d023b
21b8fff0b40c0c023b21b8ffd6b40b0b023b21b8ffe0b50d0d063b212ab8
ffe040250d0d063b2a212a092170158015a015c0150415160d0d023b1516
0c0c023b15160b0b023b15b8ffe4400b0b0b063b15100d0d063b152f2b2b
2b2b2b5ded33332f2b2f2b2b2b2b5dfd3232003ffd322f3fed12392fed12
3931305d0134262726262322061514161716163332363736362534363736
363332161716121514020706062322262735331616333212370606232226
272626034038312c5a367b9230362660374094370103fd034b413eb35c67
a73d4d55535156f1b1285a270a196a37c4e00f5091555388455052036d98
bf343024b0a75e7a2c1f152d250f319e73be45424a454152fef6cbb9feb5
6d747a090cbf0e1a0102f0363224343dbb00>PBAAAA+Tahoma AddT42Char 
2 3786 36 <0002fff6000004d605d10007000a00e0b10602435458b90002fff4401f0d
0d063b010c0d0d063b080a050a3406060900010304080008030409000709
b8ffdeb70b0b063b09090c0b1112392f2bd4cd10d4cd003f3f3f1239392f
edc010c03130012b2b1b404a05000a0325002a030409090a080587040104
14030203090a06870701071400000105010a0215011a022601290245004a
0145024a0375007a030c0634300a400a020a090a010303000803b8ffc040
1509113703030c0f0c1f0c3f0c7f0c8f0c050f0c01002f5d5d11332f2b00
3f3c3f39392f5ded3130015d8710fd5dc0c0c08710fd5dc0c008c0015d59
23013301230321030103030a01f6f401f6d187fdc7870289e6e505d1fa2f
01a0fe60024902befd42>PBAAAA+Tahoma AddT42Char 
2 4066 37 <000300970000048905d100150024003301254020050c150c270c39314a14
4a315502561569237a190a280e0b0b063b12112c341eb8ffc040500f0f06
3b1e1e071d3408032d34070816060d0d063b1615122c000f400f500f030f
161010063b0f160f0f063b0f0c0c0c023b0f0c0d0d023b0f060c0c063b0f
060d0d063b0f0e0b0b063b0f0f07251500b8ffc0b309163700b8ffeab40f
0f063b00b8ffe0b40c0c023b00b8fff2b40d0d023b00b8ffe4b40c0c063b
00b8ffdeb40d0d063b00b8ffca40120b0b063b0000350f354035cf35031e
2c1407b8fffab41010063b07b8fff8b40f0f063b07b8fffe400b0d0d023b
070d0d0d063b07b8ffc4b60b0b063b07643410f62b2b2b2b2bfd325d1133
2f2b2b2b2b2b2b2bed12392f2b2b2b2b2b2b2b5d1239ed2b003fed3fed12
392f2bed393931302b015d01140607060623211121321617161615140607
151616013426272626232311333236373636133426272626232311333236
3736360489544754c098fe55018b9f9f49504a6f628592feec2428307668
bee15d582f2d264630492f6f66e1a1829639383401c96faa37423705d115
272b8b5e69a62f0824bf020d364f171b0cfe4c131e1d5efda1546d26190e
fdda18272763>PBAAAA+Tahoma AddT42Char 
2 4522 38 <00010042ffe504ac05ec003300c1403908040711083018041a16142a2b16
242a3a16332a4611482f5a025a04570a5711106e137f130213131a340c02
602d702d022d2d2634000a132eb8ffc0b3091e372eb8ffcc40120b0b063b
2e2e350f35010f351f355f350320b8fffa40340d0d063b20157706010616
0c0c023b06200b0b023b06160d0d023b060e1010063b060e0f0f063b0616
0c0c063b06160d0d063b06b8ffe0b60b0b063b06663410f42b2b2b2b2b2b
2b2b5ded2b5d5d11332f2b2b3c003fed332f5d3fed332f5d31305d052226
272602353412373636333216171616171523262627262623220607060615
1416171616333236373636373315060607060602dd92f55959625f5b59f4
974b8338306531101a523b3986585faa403f464a403ea85e569239375017
0f31573e416f1b6261610122bcbb011667646916110f2d1bef1844211f28
4e4c4ce69099dd4c4a4b2a201f4117ec172a14151600>PBAAAA+Tahoma AddT42Char 
2 4874 39 <000200970000052d05d1000e001d00a440211f400b0b023b3812361b4812
461b67020516340803173407080f15680077000200b8ffe0b40c0c023b00
b8fff4b40d0d023b00b8ffeab40c0c063b00b8ffeab40d0d063b00b8ffd8
400f0b0b063b00671f0f1f401f02171407b8fffeb40d0d023b07b8fff4b4
1010063b07b8fff8400b0f0f063b070d0d0d063b07b8ffc8b60b0b063b07
641e10f42b2b2b2b2bed5d10f62b2b2b2b2b5ded003fed3fed31305d012b
011402070606232111213216171612073426272626232311333236373636
052da58b71e9b5fea90153d2ef54909ece72704fb486979784c652676802
e7ccfeb85c473005d13f375ffec5d7acf344302afb832a3946e9>PBAAAA+Tahoma AddT42Char 
2 5140 40 <000100970000043a05d1000b007640180835050500043501030935000800
0610062006030602060bb8ffe0400e0b0b063b0b670d0f0d0105091400b8
fffeb40d0d023b00b8fff4b41010063b00b8fffc400b0c0c063b00070d0d
063b00b8ffc2b60b0b063b00640c10f62b2b2b2b2bfd325d10f62b32322f
5d003fed3fed12392fed31303311211521112115211121159703a3fd2302
abfd5502dd05d1b0fe68b0fdd7b0>PBAAAA+Tahoma AddT42Char 
2 5304 41 <000100970000041205d10009007140110535020207013508030708000301
030300b8ffc0b309113700b8ffcc40100b0b063b00000b0f0b1f0b020205
1407b8fffeb40d0d023b07b8fffab41010063b07b8fff8b40f0f063b07b8
ffc2b60b0b063b07640a10f62b2b2b2bfd325d11332f2b2b332f5d003f3f
ed12392fed3130012111211521112311210412fd4b0298fd68c6037b0521
fe5cb0fd3305d100>PBAAAA+Tahoma AddT42Char 
2 5462 42 <00010042ffe304f505ec003000ee404432400b0b023b0a0306111d031a16
2a163711342c47115a025a04560a6b156b170d283540290129290c007f13
0113131a340c022334000a13292906132714002a102a022ab8ffea400b0c
0c023b2a020d0d023b2ab8ffeab40c0c063b2ab8ffeeb40d0d063b2ab8ff
d2400d0b0b063b2a2a320f324032021db8fff840340d0d063b1d15750601
06160c0c023b06200b0b023b06160d0d023b060e1010063b060e0f0f063b
06160c0c063b06100d0d063b06b8ffe0b60b0b063b06663110f42b2b2b2b
2b2b2b2b5ded2b5d11332f2b2b2b2b2b5ded3312392f2f003fed3fed332f
5d1112392f5ded31305d012b052224272602353412373624333216171616
171523262627262623220011141617161633323637112135211106060706
0603069efefa5e5e64655e5b010a9e4b8a3f327b2611254f483c9c5ad7fe
f7464240b57154a639fea8021c267f3749761d6062630124beb4011d6562
6a16130f3513ef213b221e28febcfef396e04e4d5118180181aefd761134
0f161600>PBAAAA+Tahoma AddT42Char 
2 5856 43 <00010097000004d005d1000b012fb50d400b0b023bb10602435458b20335
08b8ffc040100f0f063b0808050a0703010508000109b8fff4b41010063b
09b8ffe0b40f0f063b09b8fffcb40c0c063b09b8ffffb40d0d063b09b8ff
eab60b0b063b090001b8fff4b41010063b01b8ffe2b40f0f063b01b8fffa
b40c0c063b01b8fffcb40d0d063b01b8ffe6400b0b0b063b01010d0c0803
05b8fff4b41010063b05b8fff8400b0f0f063b05040d0d063b05b8ffc4b7
0b0b063b05050d0c1112392f2b2b2b2bddc01112392f2b2b2b2b2b10cd2b
2b2b2b2b10cd003fc03fc012392f2bed31301b401503350808050a070301
0508090214000c0b0b023b00b8fff440160c0c023b000e0d0d023b00650d
0f0d400d0208031405b8fffeb60d0d023b05640c10f62bfd325d10f62b2b
2bfd32003f3c3f3c12392fed313059012b21231121112311331121113304
d0c6fd53c6c602adc602d9fd2705d1fdb8024800>PBAAAA+Tahoma AddT42Char 
2 6206 44 <0001005d0000029f05d1000b00a3b10602435458400c09043206030a0332
01080203b8fff2b41010063b03b8fff440110f0f063b03100c0c063b031c
0d0d063b03b8ffd4b70b0b063b03030d0c1112392f2b2b2b2b2bcd003ffd
c03ffdc031301b403609043206030a03320108080ba00a140502a09003a0
03b00303030e0b0b023b03060c0c023b03020d0d023b03030d0c0f0d400d
500d035d1112392f2b2b2b5ded32fded32003fed323fed32313059212135
331123352115231133029ffdbebebe0242bebe9804a19898fb5f>PBAAAA+Tahoma AddT42Char 
2 6412 45 <00010009ffeb02c805d100150076401b090118017301730e830105123315
0307070b340309131307111400b8fff4b40c0c023b00b8ffe6b40d0d023b
00b8fff2400b1010063b000e0f0f063b00b8fff4b40c0c063b00b8fffeb4
0d0d063b00b8fff4b70b0b063b000017072f11332f2b2b2b2b2b2b2bed12
392f003ffd322f3fed31305d011406232226273533161633323637363635
1121352102c8efc930a1360b29793f5c6d1a1b0ffec502010183c4d4110c
bd0e222a2728744c03659e00>PBAAAA+Tahoma AddT42Char 
2 6604 46 <00010097000004d405d1000b00e8405c190956015c0903280938094a0968
098909d809060a011e0119022a01240b39013909350b49014909450b5c01
650b7c017b090f02020364010101b3000b00080920090e3709b3020b0a03
0a740b010802050a07030105080b020a0a00b8ffc0b309103700b8fff0b4
0d0d063b00b8ffe040100b0b063b00000d0f0d400d0208031405b8fffeb4
0d0d023b05b8fffab41010063b05b8fff8400b0f0f063b050c0d0d063b05
b8ffc8b60b0b063b05640c10f62b2b2b2b2bfd325d11332f2b2b2b332f39
39003f3c3f3c12393931305d018710c0c07afd2b1804c00187107afd5d18
08c0015d717221210107112311331101330104d4fefffde157c6c60262f1
fd9802b562fdad05d1fd5302adfd6700>PBAAAA+Tahoma AddT42Char 
2 6890 47 <00010097000003f605d100050055b602030435010800b8ffc0b30a113700
b8ffbe400a0b0b063b000007041401b8fffeb40d0d023b01b8fff4400b10
10063b010b0d0d063b01b8ffc8b60b0b063b01640610f62b2b2b2bed1133
2f2b2b003fed3f313021211133112103f6fca1c6029905d1fadf>PBAAAA+Tahoma AddT42Char 
2 7006 48 <000100970000059305d1000c011c4017560a0138023805360a6f026f0560
0a7f027f05700a0903b8fff2b40b0b063b04b8fff240390b0b063b550956
0a5a0b03760901050a0203090204120429043504440454046b040704200d
0d023b0404070b0903010708090a0b0305021400b8ffec40110c0c023b00
060b0b023b00020d0d023b00b8ffe8b41010063b00b8ffeab40f0f063b00
b8fffa400b0c0c063b000c0d0d063b00b8ffe6401b0b0b063b00650e0f0e
500e02050a0c0c023b050a0c0c063b051307b8fff4b41010063b07b8fffe
b40d0d023b07b8fff840110f0f063b07050c0c063b07030d0d063b07b8ff
c8b60b0b063b07640d10f62b2b2b2b2b2bed2b2b5d10f62b2b2b2b2b2b2b
2bed111739003f3c3f3c12392f2b5d1217393130015d72002b2b5d722123
11012301112311210101210593c6fe7c78fe7fb9010e0174016701130503
fc970369fafd05d1fcc3033d>PBAAAA+Tahoma AddT42Char 
2 7348 49 <00010097000004c005d100090137404e0b400b0b023b7607010c071b0724
0734074507500769026107790271070a0f0100061f011106260134064406
53066b0160067c0170060c0c010406025a0155060201060d11063b010c0b
0c063b06b8fff440110b11063b02070108060301040806010207b8fffcb4
0c0c023b07b8fff4400d0c0c063b071300200f0f063b00b8fff0b4101006
3b00b8fff640110c0c023b000e0b0b023b00160d0d023b00b8fffeb40c0c
063b00b8fffeb40d0d063b00b8ffe6401b0b0b063b00650b0f0b400b0202
040c0c023b02040c0c063b021304b8fff0b41010063b04b8fffeb40d0d02
3b04b8fff840110f0f063b04020c0c063b040c0d0d063b04b8ffc6b60b0b
063b04640a10f62b2b2b2b2b2bed2b2b5d10f62b2b2b2b2b2b2b2bfd2b2b
113939003f3c3f3c1239393130012b2b2b72715d005d5d012b2123011123
112101113304c0defd6eb901190257b90504fafc05d1fb65049b>PBAAAA+Tahoma AddT42Char 
2 7704 50 <00020042ffe1056705f00017002900c540210a0905151a0915155a095515
061e3415022734090a18060d0d063b181578030103b8ffeab40b0b023b03
b8ffe0b40d0d023b03b8ffecb40c0c063b03b8ffecb40d0d063b03b8ffdc
40140b0b063b03672b0f2b1f2b3f2b7f2b040f2b0124b8fff840340d0d06
3b2415770f010f160d0d023b0f160c0c023b0f200b0b023b0f0e1010063b
0f0e0f0f063b0f140d0d063b0f160c0c063b0fb8ffe0b60b0b063b0f662a
10f62b2b2b2b2b2b2b2b5ded2b5d5d10f62b2b2b2b2b5ded2b003fed3fed
5d3130011612151402070606232226272602353412373636333216133426
27262623220607060615101233321204b4555e5c575bf39297f257565c5d
5656f39698f439403a3ba7686ca13e3b3ff6cfcff5052662fedebab5fedc
6368636665630122b7bc011c6663676afd6294e44b4d4d4b4f4ce691fedb
fec90137>PBAAAA+Tahoma AddT42Char 
2 8038 51 <000200970000044305d10010001f00af402c3a143a1d4b144b1d500e540f
650f781c081934000710074f070307070918340a03090811100d0d063b11
1500b8ffc0b309113700b8fff4b40c0c023b00b8ffd6b40c0c063b00b8ff
cc40140b0b063b00080d0d063b0000210f210119071409b8fffeb40d0d02
3b09b8fff2400b1010063b09060d0d063b09b8fffcb40c0c063b09b8ffc6
b60b0b063b09642010f42b2b2b2b2bfd325d11332f2b2b2b2b2bed2b003f
3fed12392f5ded3130015d01140607060623231123112132161716160734
262726262323113332363736360443453d4dd09fa8c6017684ba47535ece
35362f7d5da4877894312c28041061ad3d4c4efdd505d12c3139af814d72
241f1afdad27322d6a00>PBAAAA+Tahoma AddT42Char 
2 8318 53 <000200970000051805d10010001f00e04050450f451d020a0119012c013a
003d014c014a145a015914591d6b016a14790177107b140f010c0d0d063b
0201b300100010071a3402400f0f063b0202051834060300050811150f0d
010d0c0b0b023b0db8fff4401b0c0c023b0d100d0d023b0d0c0c0c063b0d
0c0d0d063b0d0d100500b8ffc0b309113700b8ffc8400b0b0b063b000021
19031405b8fffeb40d0d023b05b8fff4400b1010063b05040d0d063b05b8
ffc4b60b0b063b05642010f42b2b2b2bfd3211332f2b2b1239392f2b2b2b
2b2b5ded003f3c3fed12392f2bed123931300187107afd18c0012b5d005d
212101231123112132161716161514060713342627262623231133323637
36360518fefffe28e2c6018080ad4e4e5ba68f662e302a7053c4ae558830
2b290250fdb005d11c33329e75a4dc3501a64165201c17fdce1e2f2a7400
>PBAAAA+Tahoma AddT42Char 
2 8648 54 <0001004dffe5044205ec0033014c40462f0d29142b2b3902390d361c3527
4a02450a4a0c451c492444275a02560a590f5a18551c5e2465066a136c15
6618651c6628602c6830761c1c7a0e742802282b110e04001a1eb8ffc040
150b0b063b1f1e2f1e7f1e031e1e22341a0271050105b8ffc04021090b37
05400b0b063b05050834000a282b110e042e171e1e0b0c0d0d063b0b152e
b8ffc0400a0914372e0c0b0b023b2eb8ffd4b40d0d023b2eb8ffe8b40f0f
063b2eb8ffeeb40c0c063b2eb8ffe6b40d0d063b2eb8ffd0400f0b0b063b
2e2e350f354f3502040425b8fff440300d0d063b2515a017b0170217100b
0b023b170c0c0c023b170c0d0d023b170e0f0f063b170c0c0c063b170c0d
0d063b17b8ffdcb40b0b063b17b8ffc0b30c1137172f2b2b2b2b2b2b2b2b
5ded2b332f5d11332f2b2b2b2b2b2b2bed2b332f11121739003fed332f2b
2b5d3fed332f5d2b111217395d31305d0522262735331616333236353426
272626272626272626353424333216171523262623220615141617161617
16161514060706060236a2e3640e62f873a4a858604572564d7a2f2e3301
1adb7ddf5f0f47de7a8aaa645f3fb63c9a8e474048b51b4331f85c658970
59701b141a16143e32318557b5f5322eed416181695f701a112b122fbe8b
57aa3b414600>PBAAAA+Tahoma AddT42Char 
2 9134 55 <0001ffff000004ad05d1000700aab10602435458400b0601350303000805
070200b8fff4b41010063b00b8fff4400b0f0f063b00200c0c063b00b8ff
e9b40d0d063b00b8ffd4b70b0b063b000009081112392f2b2b2b2b2bc6dd
c6003f3ffdc031301b401c060135030300080f093f0902055b0714025b10
0020009000a0000400b8fffc400b0c0c023b000c0b0b023b00b8ffee400d
0d0d023b000009086f097f09025d1112392f2b2b2b5de4fde45d003f3ffd
32313059211121352115211101f3fe0c04aefe0c0521b0b0fadf>PBAAAA+Tahoma AddT42Char 
2 9340 56 <00010085ffe104ba05d1001d00dd400c1f400b0b023b3a004a000200b8ff
e8b40c0c023b0cb8fff4b40d0d063b00b8ffe8400d0d0d063b170703270f
010f3400b8ffe840090c0c063b000a161417b8fffc40110c0c023b170e0b
0b023b171a0d0d023b17b8ffeeb41010063b17b8ffe0b40f0f063b17b8ff
f4b40c0c063b17b8fffbb40d0d063b17b8ffe0400f0b0b063b17171f0f1f
401f02081407b8ffc0400a09113707060b0b023b07b8fff6400b1010063b
070e0d0d063b07b8ffc4b60b0b063b07071e11332f2b2b2b2b2bed5d1133
2f2b2b2b2b2b2b2b2bed003f2bed5d3f3c2b2b2b5d3130012b0522262726
26351133111416171616333236373636351133111406070606029f83c445
4e40c61a262889635d9028251bc63f4f47bd1f45444ed99f03a1fc5f678d
383c3e3e3c398a6403a6fc5f9bde4d454400>PBAAAA+Tahoma AddT42Char 
2 9658 57 <0001fff8000004ce05d1000600fab10602435458b90005ffdeb40c11063b
01b8fff4b40d0d063b01b8fffa40180b0b063b02060b0b063b0503020603
030302080006030406b8ffe0400d0b0b063b0604200b0b063b0405b8ffe0
b70b0b063b050508071112392f2bcd2bcd2b10cd10cd003f3f3f11123931
30012b2b2b002b1b403d0504050706370657068606040614000001050704
3704570486040404140302034c0046014902430356015902060005020303
0208790076030202010300b8ffc040210c14370500150024009f00040000
080f0820083f08030f080103031303240303032f5d5d5d11332f5d2b1139
395d003f3f1239393130015d8710fd5dc08710fd5d08c059010123013301
0104cefe00d6fe00d4019c019c05d1fa2f05d1fb2c04d400>PBAAAA+Tahoma AddT42Char 
2 9952 58 <0001001a0000071d05d1000c010bb603100a11063b0bb8fff0b40a11063b
08b8fff0409e0a11063b05031203220337035b036b037c03070804070b19
0216042b022404260a3802360a48024809460a0c0d010b02040402050408
0c0b1a04280327042909260a3c023404370a4804470a490b580268026708
78048a028604d804d705d70ae705e708f701f70b1e0b080c0f370b0a0b02
0c1300010008090804071406050629002701280526064a004b0144054506
0808030b03050009060301050800b8ffc04009091137a000b0000200b8ff
d4400f0b0b063b00000e1f0e3f0e5f0e0306b8ffe0b40b0b063b062f2b5d
11332f2b5d2b003f3c3f3c3c1217393130015d8710fdc008c0018710fdc0
08c0012b5d71005d2b2b2b01012301012301330101330101071dfe8adffe
d1fed8dafe83cb012c012ac9012d012a05d1fa2f04d4fb2c05d1fb2a04d6
fb1e04e2>PBAAAA+Tahoma AddT42Char 
2 10286 59 <000100080000049d05d1000b0112b90008fff0404a0f11063b090b360539
0b4c034c07480b580258085a0b66056b0b0b080807050405060409020201
0b0a0b000a030808090b000b0a000702020305060504060101200c0f3709
200c0f3703b8ffe0b30d0f3707b8ffe0b60d0f37090a0303b8fffa40100d
11063b031304091404040901000707b8fffa401e0d11063b076806011406
0601080a0002040408060301030709040600960ab8ffc0400e091137a00a
b00a020d0a2d0a020ab8ffd4400f0b0b063b0a0a0d0696020422040204b8
ffe0b40b0b063b042f2b5de411332f2b5d5d2be4121739003f3f17393130
87052e2b2b877dc4872e182b2b877dc42b2b2b2b870810c408c4870810c4
08c4870810c408c4870810c408c4015d002b212301012301013301013301
049de3fe95fe8fd601d9fe35e201640169d7fe2e0254fdac02e902e8fdb7
0249fd22>PBAAAA+Tahoma AddT42Char 
2 10620 60 <0001fff5000004a905d1000800aeb90007fff240340b0b063b2407340744
076607730705070607081300010007061405040500070401040305030308
24002b050205160b0b063b0500b8ffea401b0b0b063b00000114050f0a10
0420043f0aa00405040c0b0b023b04b8fff2b40d0d023b04b8fff4400b0f
10063b04200c0c063b04b8ffd6400d0b0b063b04040a096f0a7f0a025d11
12392f2b2b2b2b2b5d33fd322f2b2f2b5d003f3f1217393130018710fdc0
8710fd08c0005d2b01011123110133010104a9fe09c6fe09dc0180018605
d1fcc2fd6d027e0353fd6f029100>PBAAAA+Tahoma AddT42Char 
2 12298 71 <0002003bffe103e40614001900260128b1060243545840141a2402081717
1418001e42140401082442080a00b8fff640140c0c063b00171a01101010
063b01060f0f063b01b8fff4b40c0c063b01b8ffe040220b0b063b010128
27210e101010063b0e140f0f063b0e140c0c063b0e160d0d063b0eb8ffdc
b70b0b063b0e0e28271112392f2b2b2b2b2bcd1112392f2b2b2b2bc0c0cd
2b003fed3f3fed3f1133321133113331301b402a28400b0b023b3a033d20
34223a264f204422791c071a02081b171418001e41140401082442080a17
1a01b8fff840130c0c023b011a00200b0b023b000a0c0c023b00b8ffee40
240d0d023b006f28211b0e160f0f023b0e200b0b023b0e1a0c0c023b0e1a
0d0d023b0e702710f62b2b2b2bed10f62b2b2bfd2b3c3c003fed3f3fed3f
11333311333331305d012b59212335060607060623222627262635343637
36363332161711330311262623220615141633323603e4bc2c402b285639
5b9b36373c4c433dad5f547c45bcbc466f4191a47e8b4a96722530141315
4c494ad98d93d7504953252701e4fafc0284221ad9cdc5d14300>PBAAAA+Tahoma AddT42Char 
2 12714 72 <0002003bffe60400047c001e002b015db1060243545840162b3c0e0e0025
3d0604201801181819113f0009191f0db8fff4b41010063b0db8ffeab40f
0f063b0db8ffeab40d0d063b0db8ffe0b40c0c063b0db8ffd6400a0b0b06
3b0d0d2d2c2b0eb8fff8401e0f0f063b0e03101010063b03160f0f063b03
120d0d063b031e0c0c063b03b8ffdcb70b0b063b03032d2c1112392f2b2b
2b2b2bdd2bc01112392f2b2b2b2b2bcdc6003fed33332f5d3fed12392fed
31301b40202d400c0c023b250f2d1a340f450f59229904aa040725180c0d
3719300c0f3706b8fff8b50f10372b3c0eb8ffc0401a1213023b0e0e0025
3d0604181819113f0009670c0119191f1a0cb8ffe4b41010023b0cb8ffe6
40340d0d023b0c712d3f2d012b0e100c0c023b0e1a03161010023b03160f
0f023b031a0d0d023b031a0c0c023b03200b0b023b03702c10f62b2b2b2b
2bfd2b3c5d10f62b2bed332f5d003fed33332f3fed12392f2bed2b2b2b31
305d012b5905200011100033321617161615152114163332363736363733
15060607060613262627262623220607060607026dfef5fed9011ee768a0
3c3c40fcfac4ad3e77303346170b21622737599802201e21674c4b692b2a
2c061a012d0115011101433c4040b98666c3ce1c16172b13cd0d270b0f10
02c54c6e262a2c2d2b2c6b47>PBAAAA+Tahoma AddT42Char 
2 14354 78 <00010088000004260614000b013ab10602435458400e0302080b04050a05
07010105080bb8ffeeb71010063b090a0100b8ffe4b40d0d063b00b8fffa
40090b0b063b0000050803b8fff8b50c0c063b0305b8fffa400b0f0f063b
05060d0d063b05b8ffcab70b0b063b05050d0c1112392f2b2b2bdd2bc011
332f2b2bcdd6cd2b003fc03f3f12173931301b40192802d801db09030901
1f011d021f0d2d01480179017609080bb8ffc0b30c0f370bb8fff4b40d0d
023b08b8fff4403f0d0d023b350b450b02020203011a000b000809b4020b
0a030a0802050a0507010105080b02500a600a020a0a700001000f0d0100
0d0803080c0c023b031a05b8fff040131010023b05020d0d023b05040b0b
023b056e0c10f42b2b2bfd2b3c11335d2f5d332f5d3939003f3c3f3f1239
393130018710c0c07af51804c0018710fd08c0005d2b012b2b5d71592123
010711231133110133010426f7fe5f4abcbc01baeafe35021b48fe2d0614
fc7101d8fe2d>PBAAAA+Tahoma AddT42Char 
2 15558 81 <00010088000003f6047c00160120b10602435458400d0b10084213040e06
01080d0800b8fff8b50c0c063b0001b8ffe0b41010063b01b8fffab40d0d
063b01b8fff4b40c0c063b01b8ffe4400a0b0b063b01011817100cb8fff8
b50c0c063b0c0db8fff4400b0f0f063b0d080d0d063b0db8ffcab70b0b06
3b0d0d18171112392f2b2b2bdd2bc01112392f2b2b2b2bcd2b003f3f3f3f
ed393231301b401303151615761503100d084213040e05010d0801b8fff8
400d0c0c023b011a00161010023b00b8fffeb40f0f023b00b8ffea400b0d
0d023b00060c0c023b00b8ffea40110b0b023b006f18100b080c0c023b0b
1a0db8fff640191010023b0d020d0d023b0d060c0c023b0d020b0b023b0d
6e1710f62b2b2b2bfd2b3210f42b2b2b2b2bed2b003f3c3f3fed12393130
5d59212311342627262623220607112311331536363332161503f6bc0f15
175247469547bcbc54a45ba5ba027c4d85282a294b3cfcbe045d7c4b50d9
ce00>PBAAAA+Tahoma AddT42Char 
3 0 85 <00010088000002d8045d0012009e401b000d100d200d300d040c090f0000
7f048f040204440a0f05090800b8ffc0b30a123700b8ffc0400f0b0b063b
0000140c07080c0c023b07b8fffab60c0c063b071a09b8fff04011101002
3b09020d0d023b09040b0b023b09b8fffcb41010063b09b8fffe400b0f0f
063b090c0c0c063b09b8ffcab60b0b063b096e1310f62b2b2b2b2b2b2bfd
2b2b3c11332f2b2b003f3f3cfd5d322f11123931305d0123262623220607
112311331536363332161702d80a152f214c9643bcbc6799481d1d120393
06034241fce7045da65b4b030300>PBAAAA+Tahoma AddT42Char 
2 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>PBAAAA+Tahoma AddT42Char 
PBAAAA+Tahoma /CharStrings get begin
/parenleft 11 def
/parenright 12 def
/plus 14 def
/hyphen 16 def
/period 17 def
/slash 18 def
/zero 19 def
/one 20 def
/two 21 def
/three 22 def
/four 23 def
/five 24 def
/six 25 def
/seven 26 def
/eight 27 def
/nine 28 def
/A 36 def
/B 37 def
/C 38 def
/D 39 def
/E 40 def
/F 41 def
/G 42 def
/H 43 def
/I 44 def
/J 45 def
/K 46 def
/L 47 def
/M 48 def
/N 49 def
/O 50 def
/P 51 def
/R 53 def
/S 54 def
/T 55 def
/U 56 def
/V 57 def
/W 58 def
/X 59 def
/Y 60 def
/d 71 def
/e 72 def
/k 78 def
/n 81 def
/r 85 def
end
PBAAAA+Tahoma /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 100 /d put
dup 101 /e put
dup 107 /k put
dup 110 /n put
dup 114 /r put
pop
end
%ADOEndSubsetFont
/XHWJAQ+Tahoma /PBAAAA+Tahoma findfont ct_VMDictPut
/XHWJAQ+Tahoma*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /period 
/slash /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /B /C /D 
/E /F /G /H /I /J /K /L 
/M /N /O /P /.notdef /R /S /T 
/U /V /W /X /Y 10{/.notdef}rp /d /e 
5{/.notdef}rp /k 2{/.notdef}rp /n 3{/.notdef}rp /r 141{/.notdef}rp]
XHWJAQ+Tahoma nf
XHWJAQ+Tahoma*1 [12.78 0 0 -12.78 0 0 ]msf
167.238 655.753 mo
(MEGA16)
[9.85205 7.16837 8.52307 7.66681 6.97665 0 ]xsh
19.5137 93.3689 mo
(VCC)
[7.62966 7.68075 0 ]xsh
89.4714 396.549 mo
(GND)
[8.51413 8.51413 0 ]xsh
11.7179 292.929 mo
(GND)
[8.51413 8.51413 0 ]xsh
110.239 222.971 mo
(VCC)
[7.62965 7.68076 0 ]xsh
XHWJAQ+Tahoma*1 [0 -12.78 -12.78 0 0 0 ]msf
703.698 410.953 mo
(330)
[-6.9613 -6.96136 0 ]ysh
XHWJAQ+Tahoma*1 [12.78 0 0 -12.78 0 0 ]msf
698.478 474.313 mo
(GND)
[8.51416 8.5141 0 ]xsh
447.133 93.3793 mo
(3.3V)
[6.95749 3.85184 6.95749 0 ]xsh
672.79 474.313 mo
(GND)
[8.51416 8.5141 0 ]xsh
XHWJAQ+Tahoma*1 [0 -12.78 -12.78 0 0 0 ]msf
805.398 329.233 mo
(Green)
[-8.52179 -4.59827 -6.71973 -6.71973 0 ]ysh
768.438 410.948 mo
(330)
[-6.9613 -6.96136 0 ]ysh
XHWJAQ+Tahoma*1 [12.78 0 0 -12.78 0 0 ]msf
763.278 474.313 mo
(GND)
[8.51416 8.5141 0 ]xsh
XHWJAQ+Tahoma*1 [0 -12.78 -12.78 0 0 0 ]msf
740.598 329.233 mo
(Red)
[-7.92749 -6.71332 0 ]ysh
767.18 377.171 mo
(10K)
[-6.9613 -6.96136 0 ]ysh
XHWJAQ+Tahoma*1 [12.78 0 0 -12.78 0 0 ]msf
737.358 474.313 mo
(GND)
[8.51416 8.5141 0 ]xsh
239.781 15.613 mo
(VCC)
[7.62967 7.68076 0 ]xsh
XHWJAQ+Tahoma*1 [0 -12.78 -12.78 0 0 0 ]msf
41.5377 169.813 mo
(10k)
[-6.9613 -6.96136 0 ]ysh
%ADOBeginSubsetFont: HIBBAA+Tahoma-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HIBBAA+Tahoma)
%%Title: (HIBBAA+Tahoma Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HIBBAA+Tahoma def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-600 -216 1516 1034} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 3418 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7A7EE2F631B34
F7BA2033FD0FF> |
443 <001C60D8A8C9B633001052A7F014E3CB4C767ACE52519692493C3684E66
16006E648CCDECA55B24F05B771B5C163EEA6C77992260055F0C66B267726C62
D025E928BBA32BC22A6C99AFFC0397C9C8B7D0B64852F6EBFEAE84B92964C7D4
406E2CE2C7A60D38F5D7E7A54E1E0DD3A403495FB4736E4588D6569520AEEB8F
1BE9AB0E2ABFA5E135A37A0E02A3A7BEEF38B406A7CCDE2E7743224AFB3DEB0B
C7655D6F44D705FAB5A403D06170B99D5C05D2A36A882AABF7FA6EE687DB9373
6F041F406954515A7C22043047DE40C31B15415436341C0281ED95FD71E4E021
85BEB0D647888350D100115E2AD392394817AD481818EA0C18DC7813550D94A6
77451924C7BC235C71A> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HIBBAA+Tahoma-Identity-H /Identity-H 0 [/HIBBAA+Tahoma] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XHWJAR+Tahoma /HIBBAA+Tahoma-Identity-H findfont ct_VMDictPut
XHWJAR+Tahoma [0 -12.78 -12.78 0 0 0 ]msf
41.5377 149.531 mo
(\001\273)sh
XHWJAQ+Tahoma*1 [0 -12.78 -12.78 0 0 0 ]msf
625.942 565.75 mo
(4.2k)
[-6.95752 -3.85181 -6.95752 0 ]ysh
XHWJAR+Tahoma [0 -12.78 -12.78 0 0 0 ]msf
625.942 541.634 mo
(\001\273)sh
XHWJAQ+Tahoma*1 [0 -12.78 -12.78 0 0 0 ]msf
677.777 565.75 mo
(4.2k)
[-6.95752 -3.85181 -6.95752 0 ]ysh
XHWJAR+Tahoma [0 -12.78 -12.78 0 0 0 ]msf
677.777 541.634 mo
(\001\273)sh
XHWJAQ+Tahoma*1 [12.78 0 0 -12.78 0 0 ]msf
719.238 559.813 mo
(VCC)
[7.62964 7.68079 0 ]xsh
244.997 163.339 mo
(GND)
[8.51413 8.51413 0 ]xsh
167.244 172.4 mo
(HUVUDMODUL)
[8.63037 8.38759 7.6335 8.38759 8.66859 9.85716 9.05197 8.66861 8.38757 0 ]xsh
XHWJAQ+Tahoma*1 [10.98 0 0 -10.98 0 0 ]msf
257.118 193.153 mo
(\(ADC7\)PA7)
[4.20859 6.59137 7.44766 6.60223 5.99844 4.20859 6.05322 6.59134 0 ]xsh
334.637 187.454 mo
(33)
[6.00064 0 ]xsh
257.118 206.12 mo
(\(ADC6\)PA6)
[4.20969 6.59247 7.44876 6.60333 5.99954 4.20969 6.05432 6.59244 0 ]xsh
334.637 200.422 mo
(34)
[6.00064 0 ]xsh
257.118 219.088 mo
(\(ADC5\)PA5)
[4.20969 6.59247 7.44876 6.60333 5.99954 4.20969 6.05432 6.59244 0 ]xsh
334.637 213.389 mo
(35)
[6.00064 0 ]xsh
257.118 232.055 mo
(\(ADC4\)PA4)
[4.20969 6.59247 7.44876 6.60333 5.99954 4.20969 6.05432 6.59244 0 ]xsh
334.637 226.357 mo
(36)
[6.00064 0 ]xsh
257.118 245.023 mo
(\(ADC3\)PA3)
[4.20969 6.59247 7.44876 6.60333 5.99954 4.20969 6.05432 6.59244 0 ]xsh
334.637 239.324 mo
(37)
[6.00064 0 ]xsh
257.118 257.99 mo
(\(ADC2\)PA2)
[4.20969 6.59247 7.44876 6.60333 5.99954 4.20969 6.05432 6.59244 0 ]xsh
334.637 252.291 mo
(38)
[6.00064 0 ]xsh
257.118 270.957 mo
(\(ADC1\)PA1)
[4.20969 6.59247 7.44876 6.60333 5.99954 4.20969 6.05432 6.59244 0 ]xsh
334.637 265.259 mo
(39)
[6.00064 0 ]xsh
257.118 283.925 mo
(\(ADC0\)PA0)
[4.20969 6.59247 7.44876 6.60333 5.99954 4.20969 6.05432 6.59244 0 ]xsh
334.637 278.226 mo
(40)
[6.00064 0 ]xsh
264.672 309.849 mo
(\(SCK\)PB7)
[4.21188 6.12253 6.60553 6.4628 4.21188 6.05652 6.47385 0 ]xsh
334.637 304.15 mo
(8)sh
257.48 322.816 mo
(\(MISO\)PB6)
[4.2009 8.46115 4.09116 6.11154 7.76938 4.2009 6.04553 6.46286 0 ]xsh
334.637 317.117 mo
(7)sh
257.48 335.783 mo
(\(MOSI\)PB5)
[4.2009 8.46115 7.76935 6.11154 4.09119 4.2009 6.04553 6.46286 0 ]xsh
334.637 330.019 mo
(6)sh
271.633 348.74 mo
(\(SS\)PB4)
[4.20749 6.11813 6.11813 4.20749 6.05212 6.46945 0 ]xsh
334.637 342.975 mo
(5)sh
235.333 361.696 mo
(\(AIN1/OC0\)PB3)
[4.20419 6.58698 4.09445 7.32263 5.99405 4.1933 7.77267 6.59784 5.99405 4.20419 6.04883 6.46616 
0 ]xsh
334.637 355.932 mo
(4)sh
231.853 374.652 mo
(\(AIN0/INT2\)PB2)
[4.20529 6.58807 4.09555 7.32373 5.99515 4.1944 4.09555 7.32373 6.41232 5.99515 4.20529 6.04993 
6.46725 0 ]xsh
334.637 368.888 mo
(3)sh
271.458 387.609 mo
(\(T1\)PB1)
[4.20969 6.41672 5.99951 4.20969 6.05432 6.47165 0 ]xsh
334.637 381.844 mo
(2)sh
247.818 400.565 mo
(\(T0/XCK\)PB0)
[4.20969 6.41672 5.99951 4.19879 6.3837 6.60336 6.4606 4.20969 6.05432 6.47165 0 ]xsh
334.637 394.801 mo
(1)sh
250.881 426.478 mo
(\(TOSC2\)PC7)
[4.20529 6.41232 7.77374 6.11594 6.59897 5.99512 4.20532 6.0499 6.59897 0 ]xsh
334.637 420.713 mo
(29)
[6.00064 0 ]xsh
250.881 439.434 mo
(\(TOSC1\)PC6)
[4.20529 6.41232 7.77374 6.11594 6.59897 5.99512 4.20532 6.0499 6.59897 0 ]xsh
334.637 433.67 mo
(28)
[6.00064 0 ]xsh
265.814 452.336 mo
(\(TDI\)PC5)
[4.20419 6.41122 7.44327 4.09445 4.20419 6.04883 6.59787 0 ]xsh
334.637 446.637 mo
(27)
[6.00064 0 ]xsh
262.158 465.303 mo
(\(TDO\)PC4)
[4.20309 6.41013 7.44217 7.77158 4.20309 6.04773 6.59674 0 ]xsh
334.637 459.605 mo
(26)
[6.00064 0 ]xsh
262.761 478.271 mo
(\(TMS\)PC3)
[4.20749 6.41452 8.46771 6.11813 4.20749 6.05212 6.60117 0 ]xsh
334.637 472.572 mo
(25)
[6.00064 0 ]xsh
264.255 491.238 mo
(\(TCK\)PC2)
[4.21188 6.41888 6.60556 6.4628 4.21188 6.05652 6.60553 0 ]xsh
334.637 485.539 mo
(24)
[6.00064 0 ]xsh
263.596 504.205 mo
(\(SDA\)PC1)
[4.20859 6.11923 7.44766 6.59137 4.20859 6.05319 6.60226 0 ]xsh
334.637 498.507 mo
(23)
[6.00064 0 ]xsh
265.572 517.173 mo
(\(SCL\)PC0)
[4.20749 6.11813 6.60114 5.47028 4.20746 6.05212 6.60117 0 ]xsh
334.637 511.474 mo
(22)
[6.00064 0 ]xsh
179.171 309.87 mo
(GND)
[7.31496 7.31496 0 ]xsh
143.288 304.172 mo
(31)
[6.00063 0 ]xsh
179.171 296.914 mo
(AVCC)
[6.59245 6.55946 6.60335 0 ]xsh
143.288 291.215 mo
(30)
[6.00063 0 ]xsh
179.171 283.958 mo
(AREF)
[6.60893 6.83946 6.18069 0 ]xsh
143.288 278.259 mo
(32)
[6.00063 0 ]xsh
179.171 258.045 mo
(XTAL1)
[6.3815 6.41452 6.59026 5.47025 0 ]xsh
143.288 252.346 mo
(13)
[6.00063 0 ]xsh
179.171 232.132 mo
(XTAL2)
[6.3815 6.41452 6.59026 5.47025 0 ]xsh
143.288 226.433 mo
(12)
[6.00063 0 ]xsh
179.171 335.75 mo
(VCC)
[6.55177 6.59566 0 ]xsh
143.288 330.052 mo
(10)
[6.00063 0 ]xsh
179.171 348.718 mo
(GND)
[7.31496 7.31496 0 ]xsh
143.288 343.019 mo
(11)
[6.00063 0 ]xsh
179.171 193.263 mo
(RESET)
[6.83507 6.1763 6.13242 6.1763 0 ]xsh
149.294 187.564 mo
(9)sh
262.278 633.846 mo
(\(RXD\)PD0)
[4.20419 6.8175 6.3782 7.44327 4.20422 6.04883 7.44327 0 ]xsh
334.637 628.082 mo
(14)
[6.00064 0 ]xsh
262.696 620.879 mo
(\(TXD\)PD1)
[4.202 6.40903 6.37601 7.44107 4.202 6.04663 7.4411 0 ]xsh
334.637 615.114 mo
(15)
[6.00064 0 ]xsh
259.094 607.912 mo
(\(INT0\)PD2)
[4.20309 4.09335 7.32156 6.4101 5.99295 4.20309 6.04773 7.44217 0 ]xsh
334.637 602.147 mo
(16)
[6.00064 0 ]xsh
259.094 594.944 mo
(\(INT1\)PD3)
[4.20309 4.09335 7.32156 6.4101 5.99295 4.20309 6.04773 7.44217 0 ]xsh
334.637 589.246 mo
(17)
[6.00064 0 ]xsh
256.097 581.988 mo
(\(OC1B\)PD4)
[4.20309 7.77158 6.59674 5.99295 6.46509 4.20306 6.04773 7.4422 0 ]xsh
334.637 576.289 mo
(18)
[6.00064 0 ]xsh
255.976 569.031 mo
(\(OC1A\)PD5)
[4.20419 7.77267 6.59784 5.99405 6.58698 4.20419 6.04883 7.44327 0 ]xsh
334.637 563.333 mo
(19)
[6.00064 0 ]xsh
266.176 556.075 mo
(\(ICP\)PD6)
[4.20309 4.09335 6.59677 6.04773 4.20309 6.04773 7.44217 0 ]xsh
334.637 550.376 mo
(20)
[6.00064 0 ]xsh
262.575 543.119 mo
(\(OC2\)PD7)
[4.202 7.77048 6.59564 5.99185 4.202 6.04663 7.44107 0 ]xsh
334.637 537.42 mo
(21)
[6.00064 0 ]xsh
XHWJAQ+Tahoma*1 [12.78 0 0 -12.78 0 0 ]msf
32.4777 213.253 mo
(C1)
[7.68586 0 ]xsh
XHWJAQ+Tahoma*1 [0 -12.78 -12.78 0 0 0 ]msf
50.5977 247.573 mo
(SW1)
[-7.12622 -11.5352 0 ]ysh
XHWJAQ+Tahoma*1 [0 -10.98 -10.98 0 0 0 ]msf
61.7577 248.893 mo
(12)
[-35.5214 0 ]ysh
XHWJAQ+Tahoma*1 [0 -12.78 -12.78 0 0 0 ]msf
728.178 411.913 mo
(R10)
[-7.92236 -6.96387 0 ]ysh
794.353 329.239 mo
(D3)
[-8.63666 0 ]ysh
792.908 411.913 mo
(R11)
[-7.92236 -6.96387 0 ]ysh
XHWJAQ+Tahoma*1 [10.98 0 0 -10.98 0 0 ]msf
612.678 374.593 mo
(GND)
[7.31494 7.315 0 ]xsh
658.574 368.828 mo
(1)sh
503.108 439.331 mo
(SPIMOSI)
[6.11047 6.04443 4.09003 8.46008 7.76825 6.11041 0 ]xsh
473.232 433.632 mo
(2)sh
610.877 283.876 mo
(PIO6)
[6.03345 4.0791 7.75726 0 ]xsh
658.574 278.177 mo
(3)sh
610.877 296.843 mo
(PIO7)
[6.03345 4.0791 7.75726 0 ]xsh
658.574 291.145 mo
(4)sh
503.108 167.246 mo
(RESET)
[6.83508 6.17627 6.13245 6.17627 0 ]xsh
473.232 161.548 mo
(5)sh
503.108 400.473 mo
(SPICLK)
[6.11481 6.04883 4.09448 6.59784 5.46698 0 ]xsh
473.232 394.774 mo
(6)sh
503.108 193.17 mo
(PCMCLK)
[6.05212 6.60114 8.46777 6.60114 5.47021 0 ]xsh
473.232 187.472 mo
(7)sh
503.108 206.138 mo
(PCMSYNC)
[6.04663 6.59564 8.46228 6.11261 6.32123 7.32043 0 ]xsh
473.232 200.439 mo
(8)sh
503.108 219.105 mo
(PCMIN)
[6.04883 6.59784 8.46448 4.09442 0 ]xsh
473.232 213.406 mo
(9)sh
503.108 232.073 mo
(PCMOUT)
[6.04663 6.59564 8.46228 7.77045 7.19965 0 ]xsh
467.226 226.374 mo
(10)
[6.00064 0 ]xsh
503.108 154.312 mo
(VDD)
[6.54626 7.43561 0 ]xsh
467.226 148.614 mo
(11)
[6.00064 0 ]xsh
606.672 387.593 mo
(GND1)
[7.31604 7.3161 7.43665 0 ]xsh
658.574 381.829 mo
(12)
[6.00061 0 ]xsh
503.108 270.953 mo
(UARTRX)
[7.21942 6.60455 6.83502 6.42883 6.83508 0 ]xsh
467.226 265.254 mo
(13)
[6.00064 0 ]xsh
503.108 283.92 mo
(UARTTX)
[7.21393 6.59906 6.82959 6.42328 6.42328 0 ]xsh
467.226 278.221 mo
(14)
[6.00064 0 ]xsh
503.108 296.887 mo
(UARTRTS)
[7.21722 6.60236 6.83282 6.42664 6.83289 6.42657 0 ]xsh
467.226 291.189 mo
(15)
[6.00064 0 ]xsh
503.108 309.855 mo
(UARTCTS)
[7.21393 6.59906 6.82959 6.42328 6.60992 6.42328 0 ]xsh
467.226 304.156 mo
(16)
[6.00064 0 ]xsh
503.108 361.637 mo
(USBD+)
[7.20404 6.11707 6.46832 7.4455 0 ]xsh
467.226 355.938 mo
(17)
[6.00064 0 ]xsh
503.108 348.68 mo
(USBD-)
[7.20404 6.11707 6.46832 7.4455 0 ]xsh
467.226 342.982 mo
(18)
[6.00064 0 ]xsh
610.866 232.106 mo
(PIO2)
[6.03345 4.0791 7.75726 0 ]xsh
658.563 226.407 mo
(19)
[6.00061 0 ]xsh
610.866 245.073 mo
(PIO3)
[6.03345 4.0791 7.75726 0 ]xsh
658.563 239.374 mo
(20)
[6.00061 0 ]xsh
610.866 270.997 mo
(PIO5)
[6.03345 4.0791 7.75726 0 ]xsh
658.563 265.298 mo
(21)
[6.00061 0 ]xsh
610.866 258.04 mo
(PIO4)
[6.03345 4.0791 7.75726 0 ]xsh
658.563 252.342 mo
(22)
[6.00061 0 ]xsh
503.097 413.506 mo
(SPICSB)
[6.11591 6.04993 4.09558 6.59894 6.11597 0 ]xsh
467.215 407.808 mo
(23)
[6.00064 0 ]xsh
503.097 426.474 mo
(SPIMISO)
[6.11267 6.04657 4.09229 8.46222 4.09229 6.11267 0 ]xsh
467.215 420.775 mo
(24)
[6.00064 0 ]xsh
606.661 400.616 mo
(GND2)
[7.31604 7.31604 7.43671 0 ]xsh
658.563 394.851 mo
(25)
[6.00061 0 ]xsh
620.825 154.433 mo
(NC)
[7.31494 0 ]xsh
658.563 148.669 mo
(26)
[6.00061 0 ]xsh
606.661 413.572 mo
(GND3)
[7.31604 7.31604 7.43671 0 ]xsh
658.563 407.807 mo
(27)
[6.00061 0 ]xsh
610.866 322.844 mo
(PIO9)
[6.03345 4.0791 7.75726 0 ]xsh
658.563 317.146 mo
(33)
[6.00061 0 ]xsh
606.661 426.528 mo
(GND4)
[7.31604 7.31604 7.43671 0 ]xsh
658.563 420.764 mo
(28)
[6.00061 0 ]xsh
610.866 309.888 mo
(PIO8)
[6.03345 4.0791 7.75726 0 ]xsh
658.563 304.189 mo
(34)
[6.00061 0 ]xsh
604.86 335.812 mo
(PIO10)
[6.04114 4.08679 7.76495 5.98633 0 ]xsh
658.563 330.047 mo
(32)
[6.00061 0 ]xsh
604.86 348.768 mo
(PIO11)
[6.04114 4.08679 7.76495 5.98633 0 ]xsh
658.563 343.003 mo
(31)
[6.00061 0 ]xsh
610.328 180.28 mo
(AIO1)
[6.57379 4.0813 7.75946 0 ]xsh
658.563 174.581 mo
(35)
[6.00061 0 ]xsh
610.328 193.247 mo
(AIO2)
[6.57379 4.0813 7.75946 0 ]xsh
658.563 187.549 mo
(30)
[6.00061 0 ]xsh
606.661 439.485 mo
(GND5)
[7.31604 7.31604 7.43671 0 ]xsh
658.563 433.72 mo
(29)
[6.00061 0 ]xsh
XHWJAQ+Tahoma*1 [12.78 0 0 -12.78 0 0 ]msf
491.178 121.873 mo
(U2)
[8.40295 0 ]xsh
491.178 474.307 mo
(BLUETOOTH-RN41)
[7.52747 6.36444 8.38379 7.16962 7.4635 9.04816 9.04816 7.4635 8.62659 4.63916 7.93646 8.52435 
6.97791 0 ]xsh
XHWJAQ+Tahoma*1 [0 -12.78 -12.78 0 0 0 ]msf
729.618 329.233 mo
(D4)
[-8.63666 0 ]ysh
742.704 377.171 mo
(R12)
[-7.92236 -6.96387 0 ]ysh
17.0687 169.815 mo
(R13)
[-7.92236 -6.96387 0 ]ysh
650.433 554.48 mo
(R14)
[-7.92236 -6.96387 0 ]ysh
702.268 554.48 mo
(R15)
[-7.92236 -6.96387 0 ]ysh
XHWJAQ+Tahoma*1 [12.78 0 0 -12.78 0 0 ]msf
292.458 36.3727 mo
(S1)
[7.13901 0 ]xsh
292.458 88.2084 mo
(S2)
[7.13901 0 ]xsh
361.572 422.469 mo
(JTAG)
[5.33575 7.46991 7.67447 0 ]xsh
413.408 279.972 mo
(TX)
[7.44052 0 ]xsh
400.449 267.013 mo
(RX)
[7.9249 0 ]xsh
685.507 254.055 mo
(PIO4)
[7.03662 4.76184 9.04303 0 ]xsh
426.367 590.948 mo
(INTERRUPT\(SENSORMODUL\))
[4.76697 8.52435 7.4635 7.16965 7.9364 7.9364 8.38376 7.04172 7.4635 4.89471 7.11853 7.16962 
8.52435 7.11859 9.0481 7.93646 9.85333 9.0481 8.66479 8.38373 6.36444 0 ]xsh
426.367 603.907 mo
(INTERRUPT\(STYRMODUL\))
[4.7644 8.52179 7.46097 7.16708 7.93384 7.93387 8.3812 7.03915 7.46094 4.89215 7.11597 7.461 
7.35876 7.93384 9.85077 9.04559 8.66223 8.38116 6.36194 0 ]xsh
322.682 111.481 mo
(POWER)
[7.04556 9.05197 11.5313 7.17349 0 ]xsh
322.682 59.6964 mo
(MODE)
[9.84183 9.03665 8.65326 0 ]xsh
1.32 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
167.238 176.293 mo
322.698 176.293 li
322.698 642.793 li
167.238 642.793 li
167.238 176.293 li
.286717 1 1 .377844 cmyk
@
.78 lw
348.618 189.253 mo
322.698 189.253 li
@
348.618 202.213 mo
322.698 202.213 li
@
348.618 215.173 mo
322.698 215.173 li
@
348.618 228.133 mo
322.698 228.133 li
@
348.618 241.093 mo
322.698 241.093 li
@
348.618 254.053 mo
322.698 254.053 li
@
348.618 267.013 mo
322.698 267.013 li
@
348.618 279.973 mo
322.698 279.973 li
@
348.618 305.893 mo
322.698 305.893 li
@
348.618 318.853 mo
322.698 318.853 li
@
348.618 331.813 mo
322.698 331.813 li
@
348.618 344.773 mo
322.698 344.773 li
@
348.618 357.733 mo
322.698 357.733 li
@
348.618 370.693 mo
322.698 370.693 li
@
348.618 383.593 mo
322.698 383.593 li
@
348.618 396.553 mo
322.698 396.553 li
@
348.618 422.473 mo
322.698 422.473 li
@
348.618 435.433 mo
322.698 435.433 li
@
348.618 448.393 mo
322.698 448.393 li
@
348.618 461.353 mo
322.698 461.353 li
@
348.618 474.313 mo
322.698 474.313 li
@
348.618 487.273 mo
322.698 487.273 li
@
348.618 500.233 mo
322.698 500.233 li
@
348.618 513.193 mo
322.698 513.193 li
@
141.318 305.893 mo
167.238 305.893 li
@
141.318 292.933 mo
167.238 292.933 li
@
141.318 279.973 mo
167.238 279.973 li
@
141.318 254.053 mo
167.238 254.053 li
@
141.318 228.133 mo
167.238 228.133 li
@
141.318 331.813 mo
167.238 331.813 li
@
141.318 344.773 mo
167.238 344.773 li
@
167.238 189.253 mo
167.238 192.013 164.958 194.293 162.198 194.293 cv
159.438 194.293 157.158 192.013 157.158 189.253 cv
157.158 186.493 159.438 184.213 162.198 184.213 cv
164.958 184.213 167.238 186.493 167.238 189.253 cv
cp
@
141.318 189.253 mo
157.098 189.253 li
@
348.618 629.833 mo
322.698 629.833 li
@
348.618 616.873 mo
322.698 616.873 li
@
348.618 603.913 mo
322.698 603.913 li
@
348.618 590.953 mo
322.698 590.953 li
@
348.618 577.993 mo
322.698 577.993 li
@
348.618 565.033 mo
322.698 565.033 li
@
348.618 552.073 mo
322.698 552.073 li
@
348.618 539.113 mo
322.698 539.113 li
@
1.32 lw
28.5777 105.013 mo
24.6777 98.5929 li
20.8377 105.013 li
@
.78 lw
24.6777 111.493 mo
24.6777 98.5929 li
@
1.32 lw
92.7177 383.593 mo
112.158 383.593 li
@
.78 lw
102.438 370.693 mo
102.438 383.593 li
@
24.6777 215.173 mo
24.6777 217.753 li
@
24.6777 228.133 mo
24.6777 225.553 li
@
14.2977 225.553 mo
35.0577 225.553 li
35.0577 222.913 li
14.2977 222.913 li
cp
f
.06 lw
14.2977 222.913 mo
35.0577 222.913 li
35.0577 225.553 li
14.2977 225.553 li
cp
@
14.2977 220.393 mo
35.0577 220.393 li
35.0577 217.753 li
14.2977 217.753 li
cp
f
14.2977 217.753 mo
35.0577 217.753 li
35.0577 220.393 li
14.2977 220.393 li
cp
@
.78 lw
24.6777 202.213 mo
24.6777 215.173 li
@
24.6777 241.093 mo
24.6777 228.133 li
@
1.32 lw
14.9577 279.973 mo
34.3977 279.973 li
@
.78 lw
24.6777 267.013 mo
24.6777 279.973 li
@
1.32 lw
119.298 234.613 mo
115.398 228.133 li
111.498 234.613 li
@
.78 lw
115.398 241.093 mo
115.398 228.133 li
@
1.32 lw
63.5577 241.093 mo
59.0577 215.173 li
@
64.9977 241.093 mo
64.9977 241.873 64.3377 242.533 63.5577 242.533 cv
62.7777 242.533 62.1177 241.873 62.1177 241.093 cv
62.1177 240.313 62.7777 239.653 63.5577 239.653 cv
64.3377 239.653 64.9977 240.313 64.9977 241.093 cv
ef
.06 lw
64.9977 241.093 mo
64.9977 241.873 64.3377 242.533 63.5577 242.533 cv
62.7777 242.533 62.1177 241.873 62.1177 241.093 cv
62.1177 240.313 62.7777 239.653 63.5577 239.653 cv
64.3377 239.653 64.9977 240.313 64.9977 241.093 cv
cp
@
64.9977 215.173 mo
64.9977 215.953 64.3377 216.613 63.5577 216.613 cv
62.7777 216.613 62.1177 215.953 62.1177 215.173 cv
62.1177 214.393 62.7777 213.733 63.5577 213.733 cv
64.3377 213.733 64.9977 214.393 64.9977 215.173 cv
ef
64.9977 215.173 mo
64.9977 215.953 64.3377 216.613 63.5577 216.613 cv
62.7777 216.613 62.1177 215.953 62.1177 215.173 cv
62.1177 214.393 62.7777 213.733 63.5577 213.733 cv
64.3377 213.733 64.9977 214.393 64.9977 215.173 cv
cp
@
.78 lw
63.5577 254.053 mo
63.5577 241.093 li
@
63.5577 202.213 mo
63.5577 215.173 li
@
1.32 lw
706.938 396.553 mo
706.938 422.473 li
@
715.998 422.473 mo
715.998 396.553 li
@
706.938 422.473 mo
715.998 422.473 li
@
706.938 396.553 mo
715.998 396.553 li
@
.78 lw
711.438 383.593 mo
711.438 396.553 li
@
711.438 435.433 mo
711.438 422.473 li
@
1.32 lw
701.718 461.353 mo
721.158 461.353 li
@
.78 lw
711.438 448.393 mo
711.438 461.353 li
@
1.32 lw
456.198 105.013 mo
452.298 98.5929 li
448.398 105.013 li
@
.78 lw
452.298 111.493 mo
452.298 98.5929 li
@
1.32 lw
695.238 461.353 mo
675.798 461.353 li
@
.78 lw
685.518 448.393 mo
685.518 461.353 li
@
1.32 lw
782.718 305.893 mo
776.238 318.853 li
769.758 305.893 li
@
782.718 318.853 mo
776.238 318.853 li
769.758 318.853 li
@
782.718 305.893 mo
776.238 305.893 li
769.758 305.893 li
@
.78 lw
776.238 305.893 mo
776.238 318.853 li
@
765.858 309.793 mo
758.778 316.873 li
@
766.518 315.613 mo
759.378 322.693 li
@
776.238 331.813 mo
776.238 318.853 li
@
776.238 292.933 mo
776.238 305.893 li
@
758.778 316.873 mo
760.698 312.373 li
763.278 314.953 li
758.778 316.873 li
@
758.958 316.453 mo
759.738 316.453 li
@
759.198 315.793 mo
761.358 315.793 li
@
759.498 315.073 mo
762.918 315.073 li
@
759.798 314.413 mo
762.738 314.413 li
@
760.098 313.693 mo
762.078 313.693 li
@
760.398 313.033 mo
761.358 313.033 li
@
759.378 322.693 mo
761.358 318.193 li
763.938 320.773 li
759.378 322.693 li
@
759.438 322.633 mo
759.558 322.633 li
@
759.738 321.973 mo
761.178 321.973 li
@
760.038 321.253 mo
762.738 321.253 li
@
760.338 320.593 mo
763.758 320.593 li
@
760.578 319.933 mo
763.038 319.933 li
@
760.878 319.213 mo
762.378 319.213 li
@
761.178 318.553 mo
761.658 318.553 li
@
1.32 lw
771.678 396.553 mo
771.678 422.473 li
@
780.798 422.473 mo
780.798 396.553 li
@
771.678 422.473 mo
780.798 422.473 li
@
771.678 396.553 mo
780.798 396.553 li
@
.78 lw
776.238 383.593 mo
776.238 396.553 li
@
776.238 435.433 mo
776.238 422.473 li
@
1.32 lw
491.178 461.353 mo
646.638 461.353 li
646.638 124.453 li
491.178 124.453 li
491.178 461.353 li
@
.78 lw
672.558 370.693 mo
646.638 370.693 li
@
465.258 435.433 mo
491.178 435.433 li
@
672.558 279.973 mo
646.638 279.973 li
@
672.558 292.933 mo
646.638 292.933 li
@
465.258 163.333 mo
491.178 163.333 li
@
465.258 396.553 mo
491.178 396.553 li
@
465.258 189.253 mo
491.178 189.253 li
@
465.258 202.213 mo
491.178 202.213 li
@
465.258 215.173 mo
491.178 215.173 li
@
465.258 228.133 mo
491.178 228.133 li
@
465.258 150.373 mo
491.178 150.373 li
@
672.558 383.593 mo
646.638 383.593 li
@
465.258 267.013 mo
491.178 267.013 li
@
465.258 279.973 mo
491.178 279.973 li
@
465.258 292.933 mo
491.178 292.933 li
@
465.258 305.893 mo
491.178 305.893 li
@
465.258 357.733 mo
491.178 357.733 li
@
465.258 344.773 mo
491.178 344.773 li
@
672.558 228.133 mo
646.638 228.133 li
@
672.558 241.093 mo
646.638 241.093 li
@
672.558 267.013 mo
646.638 267.013 li
@
672.558 254.053 mo
646.638 254.053 li
@
465.258 409.513 mo
491.178 409.513 li
@
465.258 422.473 mo
491.178 422.473 li
@
672.558 396.553 mo
646.638 396.553 li
@
672.558 150.373 mo
646.638 150.373 li
@
672.558 409.513 mo
646.638 409.513 li
@
672.558 318.853 mo
646.638 318.853 li
@
672.558 422.473 mo
646.638 422.473 li
@
672.558 305.893 mo
646.638 305.893 li
@
672.558 331.813 mo
646.638 331.813 li
@
672.558 344.773 mo
646.638 344.773 li
@
672.558 176.293 mo
646.638 176.293 li
@
672.558 189.253 mo
646.638 189.253 li
@
672.558 435.433 mo
646.638 435.433 li
@
1.32 lw
766.518 461.353 mo
785.958 461.353 li
@
.78 lw
776.238 448.393 mo
776.238 461.353 li
@
1.32 lw
717.918 305.893 mo
711.438 318.853 li
704.958 305.893 li
@
717.918 318.853 mo
711.438 318.853 li
704.958 318.853 li
@
717.918 305.893 mo
711.438 305.893 li
704.958 305.893 li
@
.78 lw
711.438 305.893 mo
711.438 318.853 li
@
701.058 309.793 mo
693.978 316.873 li
@
701.718 315.613 mo
694.578 322.693 li
@
711.438 331.813 mo
711.438 318.853 li
@
711.438 292.933 mo
711.438 305.893 li
@
693.978 316.873 mo
695.898 312.373 li
698.478 314.953 li
693.978 316.873 li
@
694.158 316.453 mo
694.938 316.453 li
@
694.458 315.793 mo
696.558 315.793 li
@
694.758 315.073 mo
698.178 315.073 li
@
694.998 314.413 mo
697.938 314.413 li
@
695.298 313.693 mo
697.278 313.693 li
@
695.598 313.033 mo
696.558 313.033 li
@
694.578 322.693 mo
696.558 318.193 li
699.138 320.773 li
694.578 322.693 li
@
694.638 322.633 mo
694.758 322.633 li
@
694.938 321.973 mo
696.378 321.973 li
@
695.238 321.253 mo
697.998 321.253 li
@
695.538 320.593 mo
698.958 320.593 li
@
695.838 319.933 mo
698.298 319.933 li
@
696.138 319.213 mo
697.578 319.213 li
@
696.378 318.553 mo
696.918 318.553 li
@
1.32 lw
754.878 370.693 mo
754.878 344.773 li
@
745.818 344.773 mo
745.818 370.693 li
@
754.878 344.773 mo
745.818 344.773 li
@
754.878 370.693 mo
745.818 370.693 li
@
.78 lw
750.318 383.593 mo
750.318 370.693 li
@
750.318 331.813 mo
750.318 344.773 li
@
1.32 lw
740.598 461.353 mo
760.038 461.353 li
@
.78 lw
750.318 448.393 mo
750.318 461.353 li
@
1.32 lw
248.838 27.3129 mo
244.998 20.8329 li
241.098 27.3129 li
@
.78 lw
244.998 33.7928 mo
244.998 20.8329 li
@
1.32 lw
29.2377 163.333 mo
29.2377 137.413 li
@
20.1777 137.413 mo
20.1777 163.333 li
@
29.2377 137.413 mo
20.1777 137.413 li
@
29.2377 163.333 mo
20.1777 163.333 li
@
.78 lw
24.6777 176.293 mo
24.6777 163.333 li
@
24.6777 124.453 mo
24.6777 137.413 li
@
1.32 lw
629.178 539.113 mo
629.178 565.033 li
@
638.238 565.033 mo
638.238 539.113 li
@
629.178 565.033 mo
638.238 565.033 li
@
629.178 539.113 mo
638.238 539.113 li
@
.78 lw
633.678 526.153 mo
633.678 539.113 li
@
633.678 577.993 mo
633.678 565.033 li
@
1.32 lw
681.018 539.113 mo
681.018 565.033 li
@
690.078 565.033 mo
690.078 539.113 li
@
681.018 565.033 mo
690.078 565.033 li
@
681.018 539.113 mo
690.078 539.113 li
@
.78 lw
685.518 526.153 mo
685.518 539.113 li
@
685.518 577.993 mo
685.518 565.033 li
@
1.32 lw
728.298 571.513 mo
724.398 565.033 li
720.498 571.513 li
@
.78 lw
724.398 577.993 mo
724.398 565.033 li
@
1.32 lw
296.838 59.7129 mo
283.878 66.1929 li
@
.66 lw
283.878 46.7529 mo
280.638 46.7529 li
@
.78 lw
283.878 72.6729 mo
280.638 72.6729 li
@
281.478 72.6729 mo
281.658 71.8329 li
282.078 71.1129 li
282.678 70.6329 li
283.458 70.3329 li
284.238 70.3329 li
285.018 70.6329 li
285.678 71.1129 li
286.038 71.8329 li
286.218 72.6729 li
286.038 73.4529 li
285.678 74.1729 li
285.018 74.7129 li
284.238 74.9529 li
283.458 74.9529 li
282.678 74.7129 li
282.078 74.1729 li
281.658 73.4529 li
281.478 72.6729 li
282.558 72.6729 li
282.618 72.1929 li
282.858 71.8329 li
283.607 71.0019 284.582 71.2759 285.078 72.1929 cv
285.138 72.6729 li
285.078 73.0929 li
284.838 73.5129 li
284.478 73.8129 li
284.058 73.9329 li
283.638 73.9329 li
283.218 73.8129 li
282.858 73.5129 li
282.618 73.0929 li
282.558 72.6729 li
281.478 72.6729 li
ef
.06 lw
281.478 72.6729 mo
281.658 71.8329 li
282.078 71.1129 li
282.678 70.6329 li
283.458 70.3329 li
284.238 70.3329 li
285.018 70.6329 li
285.678 71.1129 li
286.038 71.8329 li
286.218 72.6729 li
286.038 73.4529 li
285.678 74.1729 li
285.018 74.7129 li
284.238 74.9529 li
283.458 74.9529 li
282.678 74.7129 li
282.078 74.1729 li
281.658 73.4529 li
281.478 72.6729 li
282.558 72.6729 li
282.618 72.1929 li
282.858 71.8329 li
283.607 71.0019 284.582 71.2759 285.078 72.1929 cv
285.138 72.6729 li
285.078 73.0929 li
284.838 73.5129 li
284.478 73.8129 li
284.058 73.9329 li
283.638 73.9329 li
283.218 73.8129 li
282.858 73.5129 li
282.618 73.0929 li
282.558 72.6729 li
281.478 72.6729 li
cp
@
281.478 46.7529 mo
281.658 45.9129 li
282.078 45.2529 li
282.678 44.7129 li
283.458 44.4129 li
284.238 44.4129 li
285.018 44.7129 li
285.678 45.2529 li
286.038 45.9129 li
286.218 46.7529 li
286.038 47.5329 li
285.678 48.2529 li
285.018 48.7929 li
284.238 49.0329 li
283.458 49.0329 li
282.678 48.7929 li
282.078 48.2529 li
281.658 47.5329 li
281.478 46.7529 li
282.558 46.7529 li
282.618 46.2729 li
282.858 45.9129 li
283.607 45.0819 284.582 45.3559 285.078 46.2729 cv
285.138 46.7529 li
285.078 47.1729 li
284.838 47.5929 li
284.478 47.8929 li
284.058 48.0129 li
283.638 48.0129 li
283.218 47.8929 li
282.858 47.5929 li
282.618 47.1729 li
282.558 46.7529 li
281.478 46.7529 li
ef
281.478 46.7529 mo
281.658 45.9129 li
282.078 45.2529 li
282.678 44.7129 li
283.458 44.4129 li
284.238 44.4129 li
285.018 44.7129 li
285.678 45.2529 li
286.038 45.9129 li
286.218 46.7529 li
286.038 47.5329 li
285.678 48.2529 li
285.018 48.7929 li
284.238 49.0329 li
283.458 49.0329 li
282.678 48.7929 li
282.078 48.2529 li
281.658 47.5329 li
281.478 46.7529 li
282.558 46.7529 li
282.618 46.2729 li
282.858 45.9129 li
283.607 45.0819 284.582 45.3559 285.078 46.2729 cv
285.138 46.7529 li
285.078 47.1729 li
284.838 47.5929 li
284.478 47.8929 li
284.058 48.0129 li
283.638 48.0129 li
283.218 47.8929 li
282.858 47.5929 li
282.618 47.1729 li
282.558 46.7529 li
281.478 46.7529 li
cp
@
294.438 59.7129 mo
294.618 58.8729 li
294.978 58.1529 li
295.638 57.6729 li
296.418 57.3729 li
297.198 57.3729 li
297.978 57.6729 li
298.638 58.1529 li
298.998 58.8729 li
299.178 59.7129 li
298.998 60.4929 li
298.638 61.2129 li
297.978 61.7529 li
297.198 61.9929 li
296.418 61.9929 li
295.638 61.7529 li
294.978 61.2129 li
294.618 60.4929 li
294.438 59.7129 li
295.518 59.7129 li
295.578 59.2329 li
295.818 58.8729 li
296.567 58.0429 297.542 58.3159 298.038 59.2329 cv
298.098 59.7129 li
298.038 60.1329 li
297.798 60.5529 li
297.438 60.8529 li
297.018 60.9729 li
296.598 60.9729 li
296.178 60.8529 li
295.818 60.5529 li
295.578 60.1329 li
295.518 59.7129 li
294.438 59.7129 li
ef
294.438 59.7129 mo
294.618 58.8729 li
294.978 58.1529 li
295.638 57.6729 li
296.418 57.3729 li
297.198 57.3729 li
297.978 57.6729 li
298.638 58.1529 li
298.998 58.8729 li
299.178 59.7129 li
298.998 60.4929 li
298.638 61.2129 li
297.978 61.7529 li
297.198 61.9929 li
296.418 61.9929 li
295.638 61.7529 li
294.978 61.2129 li
294.618 60.4929 li
294.438 59.7129 li
295.518 59.7129 li
295.578 59.2329 li
295.818 58.8729 li
296.567 58.0429 297.542 58.3159 298.038 59.2329 cv
298.098 59.7129 li
298.038 60.1329 li
297.798 60.5529 li
297.438 60.8529 li
297.018 60.9729 li
296.598 60.9729 li
296.178 60.8529 li
295.818 60.5529 li
295.578 60.1329 li
295.518 59.7129 li
294.438 59.7129 li
cp
@
.78 lw
309.738 59.7129 mo
296.838 59.7129 li
@
270.918 46.7529 mo
283.878 46.7529 li
@
270.918 72.6729 mo
283.878 72.6729 li
@
1.32 lw
296.838 111.493 mo
283.878 117.973 li
@
.66 lw
283.878 98.5929 mo
280.638 98.5929 li
@
.78 lw
283.878 124.453 mo
280.638 124.453 li
@
281.478 124.453 mo
281.658 123.673 li
282.078 122.953 li
282.678 122.413 li
283.458 122.173 li
284.238 122.173 li
285.018 122.413 li
285.678 122.953 li
286.038 123.673 li
286.218 124.453 li
286.038 125.293 li
285.678 126.013 li
285.018 126.493 li
284.238 126.793 li
283.458 126.793 li
282.678 126.493 li
282.078 126.013 li
281.658 125.293 li
281.478 124.453 li
282.558 124.453 li
282.618 124.033 li
282.858 123.613 li
283.218 123.313 li
283.638 123.193 li
284.058 123.193 li
284.478 123.313 li
284.838 123.613 li
285.078 124.033 li
285.138 124.453 li
285.078 124.933 li
284.582 125.85 283.608 126.124 282.858 125.293 cv
282.618 124.933 li
282.558 124.453 li
281.478 124.453 li
ef
.06 lw
281.478 124.453 mo
281.658 123.673 li
282.078 122.953 li
282.678 122.413 li
283.458 122.173 li
284.238 122.173 li
285.018 122.413 li
285.678 122.953 li
286.038 123.673 li
286.218 124.453 li
286.038 125.293 li
285.678 126.013 li
285.018 126.493 li
284.238 126.793 li
283.458 126.793 li
282.678 126.493 li
282.078 126.013 li
281.658 125.293 li
281.478 124.453 li
282.558 124.453 li
282.618 124.033 li
282.858 123.613 li
283.218 123.313 li
283.638 123.193 li
284.058 123.193 li
284.478 123.313 li
284.838 123.613 li
285.078 124.033 li
285.138 124.453 li
285.078 124.933 li
284.582 125.85 283.608 126.124 282.858 125.293 cv
282.618 124.933 li
282.558 124.453 li
281.478 124.453 li
cp
@
281.478 98.5929 mo
281.658 97.7529 li
282.078 97.0329 li
282.678 96.5529 li
283.458 96.2529 li
284.238 96.2529 li
285.018 96.5529 li
285.678 97.0329 li
286.038 97.7529 li
286.218 98.5929 li
286.038 99.3729 li
285.678 100.093 li
285.018 100.573 li
284.238 100.873 li
283.458 100.873 li
282.678 100.573 li
282.078 100.093 li
281.658 99.3729 li
281.478 98.5929 li
282.558 98.5929 li
282.618 98.1129 li
282.858 97.6929 li
283.218 97.4529 li
283.638 97.2729 li
284.058 97.2729 li
284.478 97.4529 li
284.838 97.6929 li
285.078 98.1129 li
285.138 98.5929 li
285.078 99.0129 li
284.838 99.4329 li
284.478 99.6729 li
284.058 99.8529 li
283.638 99.8529 li
283.218 99.6729 li
282.858 99.4329 li
282.618 99.0129 li
282.558 98.5929 li
281.478 98.5929 li
ef
281.478 98.5929 mo
281.658 97.7529 li
282.078 97.0329 li
282.678 96.5529 li
283.458 96.2529 li
284.238 96.2529 li
285.018 96.5529 li
285.678 97.0329 li
286.038 97.7529 li
286.218 98.5929 li
286.038 99.3729 li
285.678 100.093 li
285.018 100.573 li
284.238 100.873 li
283.458 100.873 li
282.678 100.573 li
282.078 100.093 li
281.658 99.3729 li
281.478 98.5929 li
282.558 98.5929 li
282.618 98.1129 li
282.858 97.6929 li
283.218 97.4529 li
283.638 97.2729 li
284.058 97.2729 li
284.478 97.4529 li
284.838 97.6929 li
285.078 98.1129 li
285.138 98.5929 li
285.078 99.0129 li
284.838 99.4329 li
284.478 99.6729 li
284.058 99.8529 li
283.638 99.8529 li
283.218 99.6729 li
282.858 99.4329 li
282.618 99.0129 li
282.558 98.5929 li
281.478 98.5929 li
cp
@
294.438 111.493 mo
294.618 110.713 li
294.978 109.993 li
295.638 109.513 li
296.418 109.213 li
297.198 109.213 li
297.978 109.513 li
298.638 109.993 li
298.998 110.713 li
299.178 111.493 li
298.998 112.333 li
298.638 113.053 li
297.978 113.533 li
297.198 113.833 li
296.418 113.833 li
295.638 113.533 li
294.978 113.053 li
294.618 112.333 li
294.438 111.493 li
295.518 111.493 li
295.578 111.073 li
295.818 110.653 li
296.178 110.413 li
296.598 110.233 li
297.018 110.233 li
297.438 110.413 li
297.798 110.653 li
298.038 111.073 li
298.098 111.493 li
298.038 111.973 li
297.798 112.393 li
297.438 112.633 li
297.018 112.813 li
296.598 112.813 li
296.178 112.633 li
295.818 112.393 li
295.578 111.973 li
295.518 111.493 li
294.438 111.493 li
ef
294.438 111.493 mo
294.618 110.713 li
294.978 109.993 li
295.638 109.513 li
296.418 109.213 li
297.198 109.213 li
297.978 109.513 li
298.638 109.993 li
298.998 110.713 li
299.178 111.493 li
298.998 112.333 li
298.638 113.053 li
297.978 113.533 li
297.198 113.833 li
296.418 113.833 li
295.638 113.533 li
294.978 113.053 li
294.618 112.333 li
294.438 111.493 li
295.518 111.493 li
295.578 111.073 li
295.818 110.653 li
296.178 110.413 li
296.598 110.233 li
297.018 110.233 li
297.438 110.413 li
297.798 110.653 li
298.038 111.073 li
298.098 111.493 li
298.038 111.973 li
297.798 112.393 li
297.438 112.633 li
297.018 112.813 li
296.598 112.813 li
296.178 112.633 li
295.818 112.393 li
295.578 111.973 li
295.518 111.493 li
294.438 111.493 li
cp
@
.78 lw
309.738 111.493 mo
296.838 111.493 li
@
270.918 98.5929 mo
283.878 98.5929 li
@
270.918 124.453 mo
283.878 124.453 li
@
1.32 lw
248.238 150.373 mo
267.678 150.373 li
@
.78 lw
257.958 137.413 mo
257.958 150.373 li
@
3.9 lw
374.538 474.313 mo
374.538 435.433 li
1 .982116 .135866 .167605 cmyk
@
.873014 .24213 1 .129183 cmyk
%ADOBeginSubsetFont: PBAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XHWJAQ+Tahoma gcheck setglobal} if
2 11492 69 <00020088ffe104310614000c001d013db106024354584012061803421b04
1601150807130a40100a000db8fff0b41010063b0db8ffe8b40f0f063b0d
b8ffdab40c0c063b0db8fff0b40d0d063b0db8ffd2400b0b0b063b0d0d1f
1e180713b8fffcb50c0c063b1315b8fff4400b0f0f063b15080d0d063b15
b8ffcab70b0b063b15151f1e1112392f2b2b2bdd2bc0c01112392f2b2b2b
2b2bcd003fed33333f3f3fed33333130b00b4b5458b9000cfff438591b40
301f400f0f023b1f400b0b023b3a01330c360e4b01420c450e561c661c75
0709061803421b041601150807130a40100a00b8fff840130c0c023b001b
0d160f0f023b0d160b0b023b0db8fff2b40c0c023b0db8ffd640200d0d02
3b0d711f180713080c0c023b131a15060b0b023b15020d0d023b156e1e10
f62b2bfd2b3c3c10f42b2b2b2bed2b003fed33333f3f3fed333331305d01
2b2b59013426232206071116163332363710002322262707231133113636
333212036f7a874d9d40476e4290a4c2fef6c85b813f0cb0bc47a669bdda
0232c8cf4837fd80231dccebfeeefeb22d26340614fdd44054fed100>XHWJAQ+Tahoma AddT42Char 
3 224 86 <00010043ffe5036b047800360198b10602435458401c31111a28041d0021
21253e1d0404040b3e000920110e0d0d063b1131b8ffeab41010063b31b8
ffe6400b0f0f063b310e0d0d063b31b8ffd640230b0b063b313138370328
1a041010063b1a0c0f0f063b1a160d0d063b1a0c0c0c063b1ab8ffe0b70b
0b063b1a1a38371112392f2b2b2b2b2bcdc41112392f2b2b2b2bcd2bc400
3fed332f3fed332f1112173931301b407a38400c0c023b38400b0b023b0a
18062f1a18152f26072923360739234a02451f59025918541f502f690265
1f652d632f7902761f841f84231619141917291429173b143b1706141717
b42b2e142b2b2e752b8b2b8b2e032b2e171404001d9021012121253e1d04
04040b3e000903202b2e17140320061a111b31b8ffc0b309163731b8ffe0
b41010023b31b8fff4b40f0f023b31b8ffee40100d0d023b310c0b0b023b
313138281b1ab8ffc0401c0e15371a120f0f023b1a120d0d023b1a160c0c
023b1a120b0b023b1a2f2b2b2b2b2bed11332f2b2b2b2b2bed1217392f2f
003fed332f3fed332f5d111217395d870e2e2b0e7d10c4007131305d012b
2b5905222627353316161716163332363736363534262726262726263534
36333216171523262623220615141617161617161615140607060601b670
c3400a18413630733e2d6619231f495d2474318074e4bd5dbc400a48b15a
5d804c542a67397c7d39373c971b3c22d3132e1916221510173434434417
09180e259b6e97be2e23c939424e4f4645160b150e1f907c48812e323400
>XHWJAQ+Tahoma AddT42Char 
3 1066 88 <00010080ffe103ee045d00190132b10602435458b90000fff4b40c0c063b
19b8fff440120c0c063b18050c05010817021442050a1701b8ffe6400b10
10063b01020f0f063b01b8fffeb40d0d063b01b8fff4b40c0c063b01b8ff
e0400a0b0b063b01011b1a0e0bb8fffa400b0f0f063b0b0c0d0d063b0bb8
ffcab70b0b063b0b0b1b1a1112392f2b2b2bcd1112392f2b2b2b2b2bc000
3fed33333f3f3f3130012b2b1bb9001bffc0401d1010023b09087d087909
741604b80501180c05010817021442050a1701b8fff8b60c0c023b011a00
b8ffdeb41010023b00b8fffeb40f0f023b00b8ffeab40d0d023b00b8ffea
40100b0b023b006f1b0e080c0c023b0e1a0bb8fff640191010023b0b060d
0d023b0b040c0c023b0b060b0b023b0b6e1a10f62b2b2b2bed2b10f42b2b
2b2bfd2b3c003fed33333f3f3c5d31305d012b5921233506062322262726
2635113311141617161633323637113303eebc579c604981303035bc0d17
174f4a459c41bc7c4c4f3034349e7102d5fd8459752c2b284e390342>XHWJAQ+Tahoma AddT42Char 
XHWJAQ+Tahoma /CharStrings get begin
/b 69 def
/s 86 def
/u 88 def
end
XHWJAQ+Tahoma /Encoding get
dup 98 /b put
dup 115 /s put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XHWJAQ+Tahoma*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /period 
/slash /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /B /C /D 
/E /F /G /H /I /J /K /L 
/M /N /O /P /.notdef /R /S /T 
/U /V /W /X /Y 8{/.notdef}rp /b /.notdef 
/d /e 5{/.notdef}rp /k 2{/.notdef}rp /n 3{/.notdef}rp /r 
/s /.notdef /u 138{/.notdef}rp]
XHWJAQ+Tahoma nf
XHWJAQ+Tahoma*1 [12.78 0 0 -12.78 0 0 ]msf
711.438 513.193 mo
(I2C-bus)
[4.76184 6.97284 7.67566 4.63409 7.06213 7.1261 0 ]xsh
.78 lw
102.438 370.693 mo
102.438 344.773 li
141.318 344.773 li
@
141.318 305.893 mo
102.438 305.893 li
102.438 344.773 li
@
105.018 344.773 mo
105.018 346.213 103.878 347.353 102.438 347.353 cv
100.998 347.353 99.8577 346.213 99.8577 344.773 cv
99.8577 343.333 100.998 342.193 102.438 342.193 cv
103.878 342.193 105.018 343.333 105.018 344.773 cv
ef
.06 lw
105.018 344.773 mo
105.018 346.213 103.878 347.353 102.438 347.353 cv
100.998 347.353 99.8577 346.213 99.8577 344.773 cv
99.8577 343.333 100.998 342.193 102.438 342.193 cv
103.878 342.193 105.018 343.333 105.018 344.773 cv
cp
@
.78 lw
24.6777 267.013 mo
24.6777 241.093 li
@
63.5577 267.013 mo
63.5577 254.053 li
@
63.5577 267.013 mo
24.6777 267.013 li
@
27.2577 267.013 mo
27.2577 268.453 26.1177 269.593 24.6777 269.593 cv
23.2377 269.593 22.0977 268.453 22.0977 267.013 cv
22.0977 265.573 23.2377 264.433 24.6777 264.433 cv
26.1177 264.433 27.2577 265.573 27.2577 267.013 cv
ef
.06 lw
27.2577 267.013 mo
27.2577 268.453 26.1177 269.593 24.6777 269.593 cv
23.2377 269.593 22.0977 268.453 22.0977 267.013 cv
22.0977 265.573 23.2377 264.433 24.6777 264.433 cv
26.1177 264.433 27.2577 265.573 27.2577 267.013 cv
cp
@
.78 lw
711.438 448.393 mo
711.438 435.433 li
@
672.558 370.693 mo
685.518 370.693 li
685.518 383.593 li
685.518 396.553 li
685.518 409.513 li
685.518 422.473 li
685.518 435.433 li
685.518 448.393 li
@
672.558 435.433 mo
685.518 435.433 li
@
672.558 422.473 mo
685.518 422.473 li
@
672.558 409.513 mo
685.518 409.513 li
@
672.558 396.553 mo
685.518 396.553 li
@
672.558 383.593 mo
685.518 383.593 li
@
688.098 435.433 mo
688.098 436.873 686.958 438.013 685.518 438.013 cv
684.078 438.013 682.938 436.873 682.938 435.433 cv
682.938 433.993 684.078 432.853 685.518 432.853 cv
686.958 432.853 688.098 433.993 688.098 435.433 cv
ef
.06 lw
688.098 435.433 mo
688.098 436.873 686.958 438.013 685.518 438.013 cv
684.078 438.013 682.938 436.873 682.938 435.433 cv
682.938 433.993 684.078 432.853 685.518 432.853 cv
686.958 432.853 688.098 433.993 688.098 435.433 cv
cp
@
688.098 422.473 mo
688.098 423.913 686.958 425.053 685.518 425.053 cv
684.078 425.053 682.938 423.913 682.938 422.473 cv
682.938 421.033 684.078 419.893 685.518 419.893 cv
686.958 419.893 688.098 421.033 688.098 422.473 cv
ef
688.098 422.473 mo
688.098 423.913 686.958 425.053 685.518 425.053 cv
684.078 425.053 682.938 423.913 682.938 422.473 cv
682.938 421.033 684.078 419.893 685.518 419.893 cv
686.958 419.893 688.098 421.033 688.098 422.473 cv
cp
@
688.098 409.513 mo
688.098 410.953 686.958 412.093 685.518 412.093 cv
684.078 412.093 682.938 410.953 682.938 409.513 cv
682.938 408.073 684.078 406.933 685.518 406.933 cv
686.958 406.933 688.098 408.073 688.098 409.513 cv
ef
688.098 409.513 mo
688.098 410.953 686.958 412.093 685.518 412.093 cv
684.078 412.093 682.938 410.953 682.938 409.513 cv
682.938 408.073 684.078 406.933 685.518 406.933 cv
686.958 406.933 688.098 408.073 688.098 409.513 cv
cp
@
688.098 396.553 mo
688.098 397.993 686.958 399.133 685.518 399.133 cv
684.078 399.133 682.938 397.993 682.938 396.553 cv
682.938 395.113 684.078 393.973 685.518 393.973 cv
686.958 393.973 688.098 395.113 688.098 396.553 cv
ef
688.098 396.553 mo
688.098 397.993 686.958 399.133 685.518 399.133 cv
684.078 399.133 682.938 397.993 682.938 396.553 cv
682.938 395.113 684.078 393.973 685.518 393.973 cv
686.958 393.973 688.098 395.113 688.098 396.553 cv
cp
@
688.098 383.593 mo
688.098 385.033 686.958 386.173 685.518 386.173 cv
684.078 386.173 682.938 385.033 682.938 383.593 cv
682.938 382.153 684.078 381.013 685.518 381.013 cv
686.958 381.013 688.098 382.153 688.098 383.593 cv
ef
688.098 383.593 mo
688.098 385.033 686.958 386.173 685.518 386.173 cv
684.078 386.173 682.938 385.033 682.938 383.593 cv
682.938 382.153 684.078 381.013 685.518 381.013 cv
686.958 381.013 688.098 382.153 688.098 383.593 cv
cp
@
.78 lw
776.238 435.433 mo
776.238 448.393 li
@
750.318 383.593 mo
750.318 448.393 li
@
257.958 137.413 mo
257.958 124.453 li
270.918 124.453 li
@
270.918 72.6729 mo
257.958 72.6729 li
257.958 124.453 li
@
260.538 124.453 mo
260.538 125.893 259.398 127.033 257.958 127.033 cv
256.518 127.033 255.378 125.893 255.378 124.453 cv
255.378 123.013 256.518 121.873 257.958 121.873 cv
259.398 121.873 260.538 123.013 260.538 124.453 cv
ef
.06 lw
260.538 124.453 mo
260.538 125.893 259.398 127.033 257.958 127.033 cv
256.518 127.033 255.378 125.893 255.378 124.453 cv
255.378 123.013 256.518 121.873 257.958 121.873 cv
259.398 121.873 260.538 123.013 260.538 124.453 cv
cp
@
.78 lw
141.318 292.933 mo
115.398 292.933 li
115.398 279.973 li
115.398 241.093 li
@
141.318 331.813 mo
115.398 331.813 li
115.398 292.933 li
@
117.978 292.933 mo
117.978 294.373 116.838 295.513 115.398 295.513 cv
113.958 295.513 112.818 294.373 112.818 292.933 cv
112.818 291.493 113.958 290.353 115.398 290.353 cv
116.838 290.353 117.978 291.493 117.978 292.933 cv
ef
.06 lw
117.978 292.933 mo
117.978 294.373 116.838 295.513 115.398 295.513 cv
113.958 295.513 112.818 294.373 112.818 292.933 cv
112.818 291.493 113.958 290.353 115.398 290.353 cv
116.838 290.353 117.978 291.493 117.978 292.933 cv
cp
@
.78 lw
141.318 279.973 mo
115.398 279.973 li
@
117.978 279.973 mo
117.978 281.413 116.838 282.553 115.398 282.553 cv
113.958 282.553 112.818 281.413 112.818 279.973 cv
112.818 278.533 113.958 277.393 115.398 277.393 cv
116.838 277.393 117.978 278.533 117.978 279.973 cv
ef
.06 lw
117.978 279.973 mo
117.978 281.413 116.838 282.553 115.398 282.553 cv
113.958 282.553 112.818 281.413 112.818 279.973 cv
112.818 278.533 113.958 277.393 115.398 277.393 cv
116.838 277.393 117.978 278.533 117.978 279.973 cv
cp
@
.78 lw
24.6777 111.493 mo
24.6777 124.453 li
@
724.398 577.993 mo
724.398 590.953 li
685.518 590.953 li
633.678 590.953 li
633.678 577.993 li
@
685.518 590.953 mo
685.518 577.993 li
@
688.098 590.953 mo
688.098 592.393 686.958 593.533 685.518 593.533 cv
684.078 593.533 682.938 592.393 682.938 590.953 cv
682.938 589.513 684.078 588.373 685.518 588.373 cv
686.958 588.373 688.098 589.513 688.098 590.953 cv
ef
.06 lw
688.098 590.953 mo
688.098 592.393 686.958 593.533 685.518 593.533 cv
684.078 593.533 682.938 592.393 682.938 590.953 cv
682.938 589.513 684.078 588.373 685.518 588.373 cv
686.958 588.373 688.098 589.513 688.098 590.953 cv
cp
@
.78 lw
270.918 46.7529 mo
244.998 46.7529 li
244.998 33.7929 li
@
270.918 98.5929 mo
244.998 98.5929 li
244.998 46.7529 li
@
247.578 46.7529 mo
247.578 48.1929 246.438 49.3329 244.998 49.3329 cv
243.558 49.3329 242.418 48.1929 242.418 46.7529 cv
242.418 45.3129 243.558 44.1729 244.998 44.1729 cv
246.438 44.1729 247.578 45.3129 247.578 46.7529 cv
ef
.06 lw
247.578 46.7529 mo
247.578 48.1929 246.438 49.3329 244.998 49.3329 cv
243.558 49.3329 242.418 48.1929 242.418 46.7529 cv
242.418 45.3129 243.558 44.1729 244.998 44.1729 cv
246.438 44.1729 247.578 45.3129 247.578 46.7529 cv
cp
@
.78 lw
452.298 150.373 mo
452.298 111.493 li
@
465.258 150.373 mo
452.298 150.373 li
@
348.618 500.233 mo
685.518 500.233 li
698.478 500.233 li
@
685.518 526.153 mo
685.518 500.233 li
@
688.098 500.233 mo
688.098 501.673 686.958 502.813 685.518 502.813 cv
684.078 502.813 682.938 501.673 682.938 500.233 cv
682.938 498.793 684.078 497.653 685.518 497.653 cv
686.958 497.653 688.098 498.793 688.098 500.233 cv
ef
.06 lw
688.098 500.233 mo
688.098 501.673 686.958 502.813 685.518 502.813 cv
684.078 502.813 682.938 501.673 682.938 500.233 cv
682.938 498.793 684.078 497.653 685.518 497.653 cv
686.958 497.653 688.098 498.793 688.098 500.233 cv
cp
@
.78 lw
465.258 279.973 mo
413.418 279.973 li
413.418 629.833 li
348.618 629.833 li
@
711.438 331.813 mo
711.438 383.593 li
@
465.258 267.013 mo
400.458 267.013 li
400.458 616.873 li
348.618 616.873 li
@
776.238 331.813 mo
776.238 383.593 li
@
711.438 292.933 mo
711.438 267.013 li
672.558 267.013 li
@
672.558 228.133 mo
776.238 228.133 li
776.238 292.933 li
@
672.558 254.053 mo
750.318 254.053 li
750.318 331.813 li
@
581.898 590.953 mo
348.618 590.953 li
@
581.898 603.913 mo
348.618 603.913 li
@
348.618 513.193 mo
633.678 513.193 li
698.478 513.193 li
@
633.678 526.153 mo
633.678 513.193 li
@
636.258 513.193 mo
636.258 514.633 635.118 515.773 633.678 515.773 cv
632.238 515.773 631.098 514.633 631.098 513.193 cv
631.098 511.753 632.238 510.613 633.678 510.613 cv
635.118 510.613 636.258 511.753 636.258 513.193 cv
ef
.06 lw
636.258 513.193 mo
636.258 514.633 635.118 515.773 633.678 515.773 cv
632.238 515.773 631.098 514.633 631.098 513.193 cv
631.098 511.753 632.238 510.613 633.678 510.613 cv
635.118 510.613 636.258 511.753 636.258 513.193 cv
cp
@
.78 lw
309.738 111.493 mo
361.578 111.493 li
361.578 267.013 li
348.618 267.013 li
@
309.738 59.7129 mo
374.538 59.7129 li
374.538 279.973 li
348.618 279.973 li
@
141.318 189.253 mo
63.5577 189.253 li
@
63.5577 202.213 mo
63.5577 189.253 li
@
24.6777 176.293 mo
24.6777 189.253 li
24.6777 202.213 li
@
63.5577 189.253 mo
24.6777 189.253 li
@
66.1377 189.253 mo
66.1377 190.693 64.9977 191.833 63.5577 191.833 cv
62.1177 191.833 60.9777 190.693 60.9777 189.253 cv
60.9777 187.813 62.1177 186.673 63.5577 186.673 cv
64.9977 186.673 66.1377 187.813 66.1377 189.253 cv
ef
.06 lw
66.1377 189.253 mo
66.1377 190.693 64.9977 191.833 63.5577 191.833 cv
62.1177 191.833 60.9777 190.693 60.9777 189.253 cv
60.9777 187.813 62.1177 186.673 63.5577 186.673 cv
64.9977 186.673 66.1377 187.813 66.1377 189.253 cv
cp
@
27.2577 189.253 mo
27.2577 190.693 26.1177 191.833 24.6777 191.833 cv
23.2377 191.833 22.0977 190.693 22.0977 189.253 cv
22.0977 187.813 23.2377 186.673 24.6777 186.673 cv
26.1177 186.673 27.2577 187.813 27.2577 189.253 cv
ef
27.2577 189.253 mo
27.2577 190.693 26.1177 191.833 24.6777 191.833 cv
23.2377 191.833 22.0977 190.693 22.0977 189.253 cv
22.0977 187.813 23.2377 186.673 24.6777 186.673 cv
26.1177 186.673 27.2577 187.813 27.2577 189.253 cv
cp
@
.78 lw
361.578 474.313 mo
374.538 461.353 li
@
361.578 474.313 mo
348.618 474.313 li
@
361.578 461.353 mo
374.538 448.393 li
@
361.578 461.353 mo
348.618 461.353 li
@
361.578 448.393 mo
374.538 435.433 li
@
361.578 448.393 mo
348.618 448.393 li
@
361.578 487.273 mo
374.538 474.313 li
@
361.578 487.273 mo
348.618 487.273 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/XHWJAR+Tahoma-Identity-H uf
/XHWJAR+Tahoma /CIDFont ur
/XHWJAQ+Tahoma*1 uf
/XHWJAQ+Tahoma uf
/PBAAAA+Tahoma uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
